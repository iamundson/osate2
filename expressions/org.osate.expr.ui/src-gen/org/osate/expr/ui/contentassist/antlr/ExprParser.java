/*
 * generated by Xtext
 */
package org.osate.expr.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractPartialContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.osate.expr.services.ExprGrammarAccess;

public class ExprParser extends AbstractPartialContentAssistParser {
	
	@Inject
	private ExprGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.osate.expr.ui.contentassist.antlr.internal.InternalExprParser createParser() {
		org.osate.expr.ui.contentassist.antlr.internal.InternalExprParser result = new org.osate.expr.ui.contentassist.antlr.internal.InternalExprParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExprModelAccess().getAlternatives(), "rule__ExprModel__Alternatives");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getVarDeclAccess().getAlternatives_0(), "rule__VarDecl__Alternatives_0");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getCategoryEnumAccess().getAlternatives(), "rule__CategoryEnum__Alternatives");
					put(grammarAccess.getMetaClassEnumAccess().getAlternatives(), "rule__MetaClassEnum__Alternatives");
					put(grammarAccess.getExprModelAccess().getGroup_0(), "rule__ExprModel__Group_0__0");
					put(grammarAccess.getExprModelAccess().getGroup_1(), "rule__ExprModel__Group_1__0");
					put(grammarAccess.getExprLibraryAccess().getGroup(), "rule__ExprLibrary__Group__0");
					put(grammarAccess.getExprSubclauseAccess().getGroup(), "rule__ExprSubclause__Group__0");
					put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_2(), "rule__VarDecl__Group_2__0");
					put(grammarAccess.getVarDeclAccess().getGroup_3(), "rule__VarDecl__Group_3__0");
					put(grammarAccess.getFunDeclAccess().getGroup(), "rule__FunDecl__Group__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_0(), "rule__PrimitiveType__Group_0__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_1(), "rule__PrimitiveType__Group_1__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_2(), "rule__PrimitiveType__Group_2__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_3(), "rule__PrimitiveType__Group_3__0");
					put(grammarAccess.getRecordTypeAccess().getGroup(), "rule__RecordType__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getUnionTypeAccess().getGroup(), "rule__UnionType__Group__0");
					put(grammarAccess.getTupleTypeAccess().getGroup(), "rule__TupleType__Group__0");
					put(grammarAccess.getTupleFieldAccess().getGroup(), "rule__TupleField__Group__0");
					put(grammarAccess.getListTypeAccess().getGroup(), "rule__ListType__Group__0");
					put(grammarAccess.getSetTypeAccess().getGroup(), "rule__SetType__Group__0");
					put(grammarAccess.getBagTypeAccess().getGroup(), "rule__BagType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getQCLREFAccess().getGroup(), "rule__QCLREF__Group__0");
					put(grammarAccess.getQPREFAccess().getGroup(), "rule__QPREF__Group__0");
					put(grammarAccess.getQPREFAccess().getGroup_1(), "rule__QPREF__Group_1__0");
					put(grammarAccess.getQCREFAccess().getGroup(), "rule__QCREF__Group__0");
					put(grammarAccess.getQCREFAccess().getGroup_0(), "rule__QCREF__Group_0__0");
					put(grammarAccess.getQCREFAccess().getGroup_2(), "rule__QCREF__Group_2__0");
					put(grammarAccess.getExprModelAccess().getAnnexAssignment_0_1(), "rule__ExprModel__AnnexAssignment_0_1");
					put(grammarAccess.getExprModelAccess().getAnnexAssignment_1_1(), "rule__ExprModel__AnnexAssignment_1_1");
					put(grammarAccess.getExprLibraryAccess().getDeclsAssignment_1(), "rule__ExprLibrary__DeclsAssignment_1");
					put(grammarAccess.getExprSubclauseAccess().getDeclsAssignment_1(), "rule__ExprSubclause__DeclsAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getNameAssignment_1(), "rule__TypeDecl__NameAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getTypeAssignment_3(), "rule__TypeDecl__TypeAssignment_3");
					put(grammarAccess.getVarDeclAccess().getConstAssignment_0_0(), "rule__VarDecl__ConstAssignment_0_0");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_1(), "rule__VarDecl__NameAssignment_1");
					put(grammarAccess.getVarDeclAccess().getTypeAssignment_2_1(), "rule__VarDecl__TypeAssignment_2_1");
					put(grammarAccess.getFunDeclAccess().getNameAssignment_1(), "rule__FunDecl__NameAssignment_1");
					put(grammarAccess.getCategoryAccess().getCategoryAssignment(), "rule__Category__CategoryAssignment");
					put(grammarAccess.getMetaClassAccess().getClassAssignment(), "rule__MetaClass__ClassAssignment");
					put(grammarAccess.getRecordTypeAccess().getFieldAssignment_3(), "rule__RecordType__FieldAssignment_3");
					put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getTypeAssignment_2(), "rule__Field__TypeAssignment_2");
					put(grammarAccess.getTupleTypeAccess().getFieldAssignment_3(), "rule__TupleType__FieldAssignment_3");
					put(grammarAccess.getTupleFieldAccess().getTypeAssignment_1(), "rule__TupleField__TypeAssignment_1");
					put(grammarAccess.getListTypeAccess().getTypeAssignment_3(), "rule__ListType__TypeAssignment_3");
					put(grammarAccess.getSetTypeAccess().getTypeAssignment_2(), "rule__SetType__TypeAssignment_2");
					put(grammarAccess.getBagTypeAccess().getTypeAssignment_2(), "rule__BagType__TypeAssignment_2");
					put(grammarAccess.getMapTypeAccess().getDomAssignment_2(), "rule__MapType__DomAssignment_2");
					put(grammarAccess.getMapTypeAccess().getImgAssignment_4(), "rule__MapType__ImgAssignment_4");
					put(grammarAccess.getTypeRefAccess().getRefAssignment(), "rule__TypeRef__RefAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.osate.expr.ui.contentassist.antlr.internal.InternalExprParser typedParser = (org.osate.expr.ui.contentassist.antlr.internal.InternalExprParser) parser;
			typedParser.entryRuleExprModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}
	
	public ExprGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExprGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
