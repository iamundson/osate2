/*
 * generated by Xtext
 */
parser grammar InternalExprParser;

options {
	tokenVocab=InternalExprLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.osate.expr.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.expr.services.ExprGrammarAccess;

}

@members {
 
 	private ExprGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("HyphenMinusGreaterThanSign", "'->'");
		tokenNameToValue.put("ColonColon", "'::'");
		tokenNameToValue.put("QuestionMarkQuestionMarkQuestionMark", "'???'");
		tokenNameToValue.put("BUS", "'BUS'");
		tokenNameToValue.put("Bag", "'bag'");
		tokenNameToValue.put("Def", "'def'");
		tokenNameToValue.put("Int", "'int'");
		tokenNameToValue.put("Map", "'map'");
		tokenNameToValue.put("Set", "'set'");
		tokenNameToValue.put("Val", "'val'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("DATA", "'DATA'");
		tokenNameToValue.put("FLOW", "'FLOW'");
		tokenNameToValue.put("MODE", "'MODE'");
		tokenNameToValue.put("Bool", "'bool'");
		tokenNameToValue.put("List", "'list'");
		tokenNameToValue.put("Real", "'real'");
		tokenNameToValue.put("Type", "'type'");
		tokenNameToValue.put("Tuple", "'tuple'");
		tokenNameToValue.put("Union", "'union'");
		tokenNameToValue.put("DEVICE", "'DEVICE'");
		tokenNameToValue.put("SYSTEM", "'SYSTEM'");
		tokenNameToValue.put("THREAD", "'THREAD'");
		tokenNameToValue.put("Record", "'record'");
		tokenNameToValue.put("String", "'string'");
		tokenNameToValue.put("FEATURE", "'FEATURE'");
		tokenNameToValue.put("MEMEORY", "'MEMEORY'");
		tokenNameToValue.put("PROCESS", "'PROCESS'");
		tokenNameToValue.put("Library", "'library'");
		tokenNameToValue.put("ABSTRACT", "'ABSTRACT'");
		tokenNameToValue.put("PROCESSOR", "'PROCESSOR'");
		tokenNameToValue.put("Subclause", "'subclause'");
		tokenNameToValue.put("CLASSIFIER", "'CLASSIFIER'");
		tokenNameToValue.put("CONNECTION", "'CONNECTION'");
		tokenNameToValue.put("SUBPROGRAM", "'SUBPROGRAM'");
		tokenNameToValue.put("VIRTUAL_BUS", "'VIRTUAL_BUS'");
		tokenNameToValue.put("SUBCOMPONENT", "'SUBCOMPONENT'");
		tokenNameToValue.put("THREAD_GROUP", "'THREAD_GROUP'");
		tokenNameToValue.put("SUBPROGRAMGROUP", "'SUBPROGRAMGROUP'");
		tokenNameToValue.put("VIRTUAL_PROCESSOR", "'VIRTUAL_PROCESSOR'");
 	}
 	
    public void setGrammarAccess(ExprGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleExprModel
entryRuleExprModel 
:
{ before(grammarAccess.getExprModelRule()); }
	 ruleExprModel
{ after(grammarAccess.getExprModelRule()); } 
	 EOF 
;

// Rule ExprModel
ruleExprModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprModelAccess().getAlternatives()); }
(rule__ExprModel__Alternatives)
{ after(grammarAccess.getExprModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprLibrary
entryRuleExprLibrary 
:
{ before(grammarAccess.getExprLibraryRule()); }
	 ruleExprLibrary
{ after(grammarAccess.getExprLibraryRule()); } 
	 EOF 
;

// Rule ExprLibrary
ruleExprLibrary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprLibraryAccess().getGroup()); }
(rule__ExprLibrary__Group__0)
{ after(grammarAccess.getExprLibraryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSubclause
entryRuleExprSubclause 
:
{ before(grammarAccess.getExprSubclauseRule()); }
	 ruleExprSubclause
{ after(grammarAccess.getExprSubclauseRule()); } 
	 EOF 
;

// Rule ExprSubclause
ruleExprSubclause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprSubclauseAccess().getGroup()); }
(rule__ExprSubclause__Group__0)
{ after(grammarAccess.getExprSubclauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDecl
entryRuleTypeDecl 
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruleTypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
(rule__TypeDecl__Group__0)
{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDecl
entryRuleVarDecl 
:
{ before(grammarAccess.getVarDeclRule()); }
	 ruleVarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVarDeclAccess().getGroup()); }
(rule__VarDecl__Group__0)
{ after(grammarAccess.getVarDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunDecl
entryRuleFunDecl 
:
{ before(grammarAccess.getFunDeclRule()); }
	 ruleFunDecl
{ after(grammarAccess.getFunDeclRule()); } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunDeclAccess().getGroup()); }
(rule__FunDecl__Group__0)
{ after(grammarAccess.getFunDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCategory
entryRuleCategory 
:
{ before(grammarAccess.getCategoryRule()); }
	 ruleCategory
{ after(grammarAccess.getCategoryRule()); } 
	 EOF 
;

// Rule Category
ruleCategory 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCategoryAccess().getCategoryAssignment()); }
(rule__Category__CategoryAssignment)
{ after(grammarAccess.getCategoryAccess().getCategoryAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMetaClass
entryRuleMetaClass 
:
{ before(grammarAccess.getMetaClassRule()); }
	 ruleMetaClass
{ after(grammarAccess.getMetaClassRule()); } 
	 EOF 
;

// Rule MetaClass
ruleMetaClass 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMetaClassAccess().getClassAssignment()); }
(rule__MetaClass__ClassAssignment)
{ after(grammarAccess.getMetaClassAccess().getClassAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordType
entryRuleRecordType 
:
{ before(grammarAccess.getRecordTypeRule()); }
	 ruleRecordType
{ after(grammarAccess.getRecordTypeRule()); } 
	 EOF 
;

// Rule RecordType
ruleRecordType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordTypeAccess().getGroup()); }
(rule__RecordType__Group__0)
{ after(grammarAccess.getRecordTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionType
entryRuleUnionType 
:
{ before(grammarAccess.getUnionTypeRule()); }
	 ruleUnionType
{ after(grammarAccess.getUnionTypeRule()); } 
	 EOF 
;

// Rule UnionType
ruleUnionType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnionTypeAccess().getGroup()); }
(rule__UnionType__Group__0)
{ after(grammarAccess.getUnionTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleType
entryRuleTupleType 
:
{ before(grammarAccess.getTupleTypeRule()); }
	 ruleTupleType
{ after(grammarAccess.getTupleTypeRule()); } 
	 EOF 
;

// Rule TupleType
ruleTupleType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleTypeAccess().getGroup()); }
(rule__TupleType__Group__0)
{ after(grammarAccess.getTupleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleField
entryRuleTupleField 
:
{ before(grammarAccess.getTupleFieldRule()); }
	 ruleTupleField
{ after(grammarAccess.getTupleFieldRule()); } 
	 EOF 
;

// Rule TupleField
ruleTupleField 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleFieldAccess().getGroup()); }
(rule__TupleField__Group__0)
{ after(grammarAccess.getTupleFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListType
entryRuleListType 
:
{ before(grammarAccess.getListTypeRule()); }
	 ruleListType
{ after(grammarAccess.getListTypeRule()); } 
	 EOF 
;

// Rule ListType
ruleListType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getListTypeAccess().getGroup()); }
(rule__ListType__Group__0)
{ after(grammarAccess.getListTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetType
entryRuleSetType 
:
{ before(grammarAccess.getSetTypeRule()); }
	 ruleSetType
{ after(grammarAccess.getSetTypeRule()); } 
	 EOF 
;

// Rule SetType
ruleSetType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetTypeAccess().getGroup()); }
(rule__SetType__Group__0)
{ after(grammarAccess.getSetTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBagType
entryRuleBagType 
:
{ before(grammarAccess.getBagTypeRule()); }
	 ruleBagType
{ after(grammarAccess.getBagTypeRule()); } 
	 EOF 
;

// Rule BagType
ruleBagType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBagTypeAccess().getGroup()); }
(rule__BagType__Group__0)
{ after(grammarAccess.getBagTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapType
entryRuleMapType 
:
{ before(grammarAccess.getMapTypeRule()); }
	 ruleMapType
{ after(grammarAccess.getMapTypeRule()); } 
	 EOF 
;

// Rule MapType
ruleMapType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMapTypeAccess().getGroup()); }
(rule__MapType__Group__0)
{ after(grammarAccess.getMapTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeRef
entryRuleTypeRef 
:
{ before(grammarAccess.getTypeRefRule()); }
	 ruleTypeRef
{ after(grammarAccess.getTypeRefRule()); } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeRefAccess().getRefAssignment()); }
(rule__TypeRef__RefAssignment)
{ after(grammarAccess.getTypeRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword()); }

	QuestionMarkQuestionMarkQuestionMark 

{ after(grammarAccess.getExpressionAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}









// Entry rule entryRuleQCREF
entryRuleQCREF 
:
{ before(grammarAccess.getQCREFRule()); }
	 ruleQCREF
{ after(grammarAccess.getQCREFRule()); } 
	 EOF 
;

// Rule QCREF
ruleQCREF 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQCREFAccess().getGroup()); }
(rule__QCREF__Group__0)
{ after(grammarAccess.getQCREFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule CategoryEnum
ruleCategoryEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryEnumAccess().getAlternatives()); }
(rule__CategoryEnum__Alternatives)
{ after(grammarAccess.getCategoryEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MetaClassEnum
ruleMetaClassEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassEnumAccess().getAlternatives()); }
(rule__MetaClassEnum__Alternatives)
{ after(grammarAccess.getMetaClassEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ExprModel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getGroup_0()); }
(rule__ExprModel__Group_0__0)
{ after(grammarAccess.getExprModelAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprModelAccess().getGroup_1()); }
(rule__ExprModel__Group_1__0)
{ after(grammarAccess.getExprModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_0()); }
	ruleTypeDecl
{ after(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_1()); }
	ruleVarDecl
{ after(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getFunDeclParserRuleCall_2()); }
	ruleFunDecl
{ after(grammarAccess.getDeclarationAccess().getFunDeclParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getConstAssignment_0_0()); }
(rule__VarDecl__ConstAssignment_0_0)
{ after(grammarAccess.getVarDeclAccess().getConstAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getVarDeclAccess().getVarKeyword_0_1()); }

	Var 

{ after(grammarAccess.getVarDeclAccess().getVarKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getCategoryParserRuleCall_1()); }
	ruleCategory
{ after(grammarAccess.getTypeAccess().getCategoryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getMetaClassParserRuleCall_2()); }
	ruleMetaClass
{ after(grammarAccess.getTypeAccess().getMetaClassParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_3()); }
	ruleRecordType
{ after(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getUnionTypeParserRuleCall_4()); }
	ruleUnionType
{ after(grammarAccess.getTypeAccess().getUnionTypeParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_5()); }
	ruleTupleType
{ after(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getListTypeParserRuleCall_6()); }
	ruleListType
{ after(grammarAccess.getTypeAccess().getListTypeParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSetTypeParserRuleCall_7()); }
	ruleSetType
{ after(grammarAccess.getTypeAccess().getSetTypeParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBagTypeParserRuleCall_8()); }
	ruleBagType
{ after(grammarAccess.getTypeAccess().getBagTypeParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_9()); }
	ruleMapType
{ after(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTypeRefParserRuleCall_10()); }
	ruleTypeRef
{ after(grammarAccess.getTypeAccess().getTypeRefParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
(rule__PrimitiveType__Group_0__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_1()); }
(rule__PrimitiveType__Group_1__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_2()); }
(rule__PrimitiveType__Group_2__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_3()); }
(rule__PrimitiveType__Group_3__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryEnumAccess().getABSTRACTEnumLiteralDeclaration_0()); }
(	ABSTRACT
)
{ after(grammarAccess.getCategoryEnumAccess().getABSTRACTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getBUSEnumLiteralDeclaration_1()); }
(	BUS
)
{ after(grammarAccess.getCategoryEnumAccess().getBUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getDATAEnumLiteralDeclaration_2()); }
(	DATA
)
{ after(grammarAccess.getCategoryEnumAccess().getDATAEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getDEVICEEnumLiteralDeclaration_3()); }
(	DEVICE
)
{ after(grammarAccess.getCategoryEnumAccess().getDEVICEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getMEMEORYEnumLiteralDeclaration_4()); }
(	MEMEORY
)
{ after(grammarAccess.getCategoryEnumAccess().getMEMEORYEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getPROCESSEnumLiteralDeclaration_5()); }
(	PROCESS
)
{ after(grammarAccess.getCategoryEnumAccess().getPROCESSEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getPROCESSOREnumLiteralDeclaration_6()); }
(	PROCESSOR
)
{ after(grammarAccess.getCategoryEnumAccess().getPROCESSOREnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getSUBPROGRAMEnumLiteralDeclaration_7()); }
(	SUBPROGRAM
)
{ after(grammarAccess.getCategoryEnumAccess().getSUBPROGRAMEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getSUBPROGRAMGROUPEnumLiteralDeclaration_8()); }
(	SUBPROGRAMGROUP
)
{ after(grammarAccess.getCategoryEnumAccess().getSUBPROGRAMGROUPEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getSYSTEMEnumLiteralDeclaration_9()); }
(	SYSTEM
)
{ after(grammarAccess.getCategoryEnumAccess().getSYSTEMEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getTHREAD_GROUPEnumLiteralDeclaration_10()); }
(	THREAD_GROUP
)
{ after(grammarAccess.getCategoryEnumAccess().getTHREAD_GROUPEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getTHREADEnumLiteralDeclaration_11()); }
(	THREAD
)
{ after(grammarAccess.getCategoryEnumAccess().getTHREADEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getVIRTUAL_BUSEnumLiteralDeclaration_12()); }
(	VIRTUAL_BUS
)
{ after(grammarAccess.getCategoryEnumAccess().getVIRTUAL_BUSEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getCategoryEnumAccess().getVIRTUAL_PROCESSOREnumLiteralDeclaration_13()); }
(	VIRTUAL_PROCESSOR
)
{ after(grammarAccess.getCategoryEnumAccess().getVIRTUAL_PROCESSOREnumLiteralDeclaration_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaClassEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassEnumAccess().getCLASSIFIEREnumLiteralDeclaration_0()); }
(	CLASSIFIER
)
{ after(grammarAccess.getMetaClassEnumAccess().getCLASSIFIEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getSUBCOMPONENTEnumLiteralDeclaration_1()); }
(	SUBCOMPONENT
)
{ after(grammarAccess.getMetaClassEnumAccess().getSUBCOMPONENTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_2()); }
(	FEATURE
)
{ after(grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_3()); }
(	CONNECTION
)
{ after(grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_4()); }
(	FLOW
)
{ after(grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_5()); }
(	MODE
)
{ after(grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ExprModel__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_0__0__Impl
	rule__ExprModel__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getLibraryKeyword_0_0()); }

	Library 

{ after(grammarAccess.getExprModelAccess().getLibraryKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprModel__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexAssignment_0_1()); }
(rule__ExprModel__AnnexAssignment_0_1)
{ after(grammarAccess.getExprModelAccess().getAnnexAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprModel__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_1__0__Impl
	rule__ExprModel__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getSubclauseKeyword_1_0()); }

	Subclause 

{ after(grammarAccess.getExprModelAccess().getSubclauseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprModel__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexAssignment_1_1()); }
(rule__ExprModel__AnnexAssignment_1_1)
{ after(grammarAccess.getExprModelAccess().getAnnexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprLibrary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprLibrary__Group__0__Impl
	rule__ExprLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprLibrary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprLibraryAccess().getExprLibraryAction_0()); }
(

)
{ after(grammarAccess.getExprLibraryAccess().getExprLibraryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprLibrary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprLibrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprLibrary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprLibraryAccess().getDeclsAssignment_1()); }
(rule__ExprLibrary__DeclsAssignment_1)*
{ after(grammarAccess.getExprLibraryAccess().getDeclsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprSubclause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSubclause__Group__0__Impl
	rule__ExprSubclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSubclause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSubclauseAccess().getExprSubclauseAction_0()); }
(

)
{ after(grammarAccess.getExprSubclauseAccess().getExprSubclauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSubclause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSubclause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSubclause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSubclauseAccess().getDeclsAssignment_1()); }
(rule__ExprSubclause__DeclsAssignment_1)*
{ after(grammarAccess.getExprSubclauseAccess().getDeclsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }

	Type 

{ after(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__1__Impl
	rule__TypeDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
(rule__TypeDecl__NameAssignment_1)
{ after(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__2__Impl
	rule__TypeDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getTypeDeclAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__3__Impl
	rule__TypeDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeAssignment_3()); }
(rule__TypeDecl__TypeAssignment_3)
{ after(grammarAccess.getTypeDeclAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VarDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getAlternatives_0()); }
(rule__VarDecl__Alternatives_0)
{ after(grammarAccess.getVarDeclAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__1__Impl
	rule__VarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
(rule__VarDecl__NameAssignment_1)
{ after(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__2__Impl
	rule__VarDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_2()); }
(rule__VarDecl__Group_2__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__3__Impl
	rule__VarDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_3()); }
(rule__VarDecl__Group_3__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getVarDeclAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VarDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__0__Impl
	rule__VarDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }

	Colon 

{ after(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeAssignment_2_1()); }
(rule__VarDecl__TypeAssignment_2_1)
{ after(grammarAccess.getVarDeclAccess().getTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDecl__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_3__0__Impl
	rule__VarDecl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0()); }

	EqualsSign 

{ after(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
{ after(grammarAccess.getVarDeclAccess().getExpressionParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__0__Impl
	rule__FunDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getDefKeyword_0()); }

	Def 

{ after(grammarAccess.getFunDeclAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__1__Impl
	rule__FunDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getNameAssignment_1()); }
(rule__FunDecl__NameAssignment_1)
{ after(grammarAccess.getFunDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__2__Impl
	rule__FunDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__3__Impl
	rule__FunDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getFunDeclAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PrimitiveType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__0__Impl
	rule__PrimitiveType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanAction_0_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBoolKeyword_0_1()); }

	Bool 

{ after(grammarAccess.getPrimitiveTypeAccess().getBoolKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1__0__Impl
	rule__PrimitiveType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerAction_1_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_1_1()); }

	Int 

{ after(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_2__0__Impl
	rule__PrimitiveType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getRealAction_2_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getRealAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getRealKeyword_2_1()); }

	Real 

{ after(grammarAccess.getPrimitiveTypeAccess().getRealKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_3__0__Impl
	rule__PrimitiveType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringAction_3_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getStringAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringKeyword_3_1()); }

	String 

{ after(grammarAccess.getPrimitiveTypeAccess().getStringKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__0__Impl
	rule__RecordType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
(

)
{ after(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__1__Impl
	rule__RecordType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }

	Record 

{ after(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__2__Impl
	rule__RecordType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__3__Impl
	rule__RecordType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldAssignment_3()); }
(rule__RecordType__FieldAssignment_3)*
{ after(grammarAccess.getRecordTypeAccess().getFieldAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_0()); }
(rule__Field__NameAssignment_0)
{ after(grammarAccess.getFieldAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getFieldAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_2()); }
(rule__Field__TypeAssignment_2)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getFieldAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnionType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__0__Impl
	rule__UnionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getUnionTypeAction_0()); }
(

)
{ after(grammarAccess.getUnionTypeAccess().getUnionTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__1__Impl
	rule__UnionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getUnionKeyword_1()); }

	Union 

{ after(grammarAccess.getUnionTypeAccess().getUnionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__2__Impl
	rule__UnionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__3__Impl
	rule__UnionType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_3()); }

	QuestionMarkQuestionMarkQuestionMark 

{ after(grammarAccess.getUnionTypeAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TupleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__0__Impl
	rule__TupleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getTupleTypeAction_0()); }
(

)
{ after(grammarAccess.getTupleTypeAccess().getTupleTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__1__Impl
	rule__TupleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getTupleKeyword_1()); }

	Tuple 

{ after(grammarAccess.getTupleTypeAccess().getTupleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__2__Impl
	rule__TupleType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getTupleTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__3__Impl
	rule__TupleType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldAssignment_3()); }
(rule__TupleType__FieldAssignment_3)*
{ after(grammarAccess.getTupleTypeAccess().getFieldAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getTupleTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TupleField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleField__Group__0__Impl
	rule__TupleField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleFieldAccess().getFieldAction_0()); }
(

)
{ after(grammarAccess.getTupleFieldAccess().getFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleField__Group__1__Impl
	rule__TupleField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleFieldAccess().getTypeAssignment_1()); }
(rule__TupleField__TypeAssignment_1)
{ after(grammarAccess.getTupleFieldAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleField__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleFieldAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getTupleFieldAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ListType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__0__Impl
	rule__ListType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getListTypeAction_0()); }
(

)
{ after(grammarAccess.getListTypeAccess().getListTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__1__Impl
	rule__ListType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getListKeyword_1()); }

	List 

{ after(grammarAccess.getListTypeAccess().getListKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__2__Impl
	rule__ListType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getListTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__3__Impl
	rule__ListType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getTypeAssignment_3()); }
(rule__ListType__TypeAssignment_3)
{ after(grammarAccess.getListTypeAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getListTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SetType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__0__Impl
	rule__SetType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getSetKeyword_0()); }

	Set 

{ after(grammarAccess.getSetTypeAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__1__Impl
	rule__SetType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getSetTypeAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__2__Impl
	rule__SetType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
(rule__SetType__TypeAssignment_2)
{ after(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getRightCurlyBracketKeyword_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getSetTypeAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BagType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__0__Impl
	rule__BagType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getBagKeyword_0()); }

	Bag 

{ after(grammarAccess.getBagTypeAccess().getBagKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__1__Impl
	rule__BagType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBagTypeAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__2__Impl
	rule__BagType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getTypeAssignment_2()); }
(rule__BagType__TypeAssignment_2)
{ after(grammarAccess.getBagTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getRightCurlyBracketKeyword_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getBagTypeAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__0__Impl
	rule__MapType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }

	Map 

{ after(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__1__Impl
	rule__MapType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getMapTypeAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__2__Impl
	rule__MapType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getDomAssignment_2()); }
(rule__MapType__DomAssignment_2)
{ after(grammarAccess.getMapTypeAccess().getDomAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__3__Impl
	rule__MapType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getHyphenMinusGreaterThanSignKeyword_3()); }

	HyphenMinusGreaterThanSign 

{ after(grammarAccess.getMapTypeAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__4__Impl
	rule__MapType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getImgAssignment_4()); }
(rule__MapType__ImgAssignment_4)
{ after(grammarAccess.getMapTypeAccess().getImgAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getRightCurlyBracketKeyword_5()); }

	RightCurlyBracket 

{ after(grammarAccess.getMapTypeAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

















rule__QCREF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__0__Impl
	rule__QCREF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getGroup_0()); }
(rule__QCREF__Group_0__0)*
{ after(grammarAccess.getQCREFAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__1__Impl
	rule__QCREF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getGroup_2()); }
(rule__QCREF__Group_2__0)?
{ after(grammarAccess.getQCREFAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QCREF__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_0__0__Impl
	rule__QCREF__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); }

	ColonColon 

{ after(grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QCREF__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_2__0__Impl
	rule__QCREF__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); }

	FullStop 

{ after(grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ExprModel__AnnexAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexExprLibraryParserRuleCall_0_1_0()); }
	ruleExprLibrary{ after(grammarAccess.getExprModelAccess().getAnnexExprLibraryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__AnnexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexExprSubclauseParserRuleCall_1_1_0()); }
	ruleExprSubclause{ after(grammarAccess.getExprModelAccess().getAnnexExprSubclauseParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprLibrary__DeclsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprLibraryAccess().getDeclsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getExprLibraryAccess().getDeclsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSubclause__DeclsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSubclauseAccess().getDeclsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getExprSubclauseAccess().getDeclsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__ConstAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
(
{ before(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }

	Val 

{ after(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
)

{ after(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__TypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__CategoryAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getCategoryCategoryEnumEnumRuleCall_0()); }
	ruleCategoryEnum{ after(grammarAccess.getCategoryAccess().getCategoryCategoryEnumEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaClass__ClassAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassAccess().getClassMetaClassEnumEnumRuleCall_0()); }
	ruleMetaClassEnum{ after(grammarAccess.getMetaClassAccess().getClassMetaClassEnumEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__FieldAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldFieldParserRuleCall_3_0()); }
	ruleField{ after(grammarAccess.getRecordTypeAccess().getFieldFieldParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__FieldAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldTupleFieldParserRuleCall_3_0()); }
	ruleTupleField{ after(grammarAccess.getTupleTypeAccess().getFieldTupleFieldParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleField__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleFieldAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTupleFieldAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getBagTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__DomAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getDomTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getMapTypeAccess().getDomTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__ImgAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getImgTypeParserRuleCall_4_0()); }
	ruleType{ after(grammarAccess.getMapTypeAccess().getImgTypeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getRefTypeDeclCrossReference_0()); }
(
{ before(grammarAccess.getTypeRefAccess().getRefTypeDeclQCREFParserRuleCall_0_1()); }
	ruleQCREF{ after(grammarAccess.getTypeRefAccess().getRefTypeDeclQCREFParserRuleCall_0_1()); }
)
{ after(grammarAccess.getTypeRefAccess().getRefTypeDeclCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


