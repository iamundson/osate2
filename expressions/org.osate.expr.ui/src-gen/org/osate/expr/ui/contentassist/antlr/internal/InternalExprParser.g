/*
 * generated by Xtext
 */
parser grammar InternalExprParser;

options {
	tokenVocab=InternalExprLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.osate.expr.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.expr.services.ExprGrammarAccess;

}

@members {
 
 	private ExprGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("NumberSign", "'#'");
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("HyphenMinusGreaterThanSign", "'->'");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("ColonColon", "'::'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("EqualsSignGreaterThanSign", "'=>'");
		tokenNameToValue.put("GreaterThanSignLessThanSign", "'><'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("In", "'in'");
		tokenNameToValue.put("Of", "'of'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("PlusSignEqualsSignGreaterThanSign", "'+=>'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Bag", "'bag'");
		tokenNameToValue.put("Bus", "'bus'");
		tokenNameToValue.put("Def", "'def'");
		tokenNameToValue.put("Div", "'div'");
		tokenNameToValue.put("Int", "'int'");
		tokenNameToValue.put("Map", "'map'");
		tokenNameToValue.put("Mod", "'mod'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Set", "'set'");
		tokenNameToValue.put("Val", "'val'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("Bool", "'bool'");
		tokenNameToValue.put("Data", "'data'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Enum", "'enum'");
		tokenNameToValue.put("Flow", "'flow'");
		tokenNameToValue.put("Java", "'java'");
		tokenNameToValue.put("List", "'list'");
		tokenNameToValue.put("Mode", "'mode'");
		tokenNameToValue.put("Real", "'real'");
		tokenNameToValue.put("Then", "'then'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("Type", "'type'");
		tokenNameToValue.put("Delta", "'delta'");
		tokenNameToValue.put("Endif", "'endif'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Group", "'group'");
		tokenNameToValue.put("Modes", "'modes'");
		tokenNameToValue.put("Range", "'range'");
		tokenNameToValue.put("Tuple", "'tuple'");
		tokenNameToValue.put("Union", "'union'");
		tokenNameToValue.put("Assert", "'assert'");
		tokenNameToValue.put("Device", "'device'");
		tokenNameToValue.put("Memory", "'memory'");
		tokenNameToValue.put("Record", "'record'");
		tokenNameToValue.put("String", "'string'");
		tokenNameToValue.put("KW_System", "'system'");
		tokenNameToValue.put("Thread", "'thread'");
		tokenNameToValue.put("Applies", "'applies'");
		tokenNameToValue.put("Binding", "'binding'");
		tokenNameToValue.put("Feature", "'feature'");
		tokenNameToValue.put("Library", "'library'");
		tokenNameToValue.put("Process", "'process'");
		tokenNameToValue.put("Virtual", "'virtual'");
		tokenNameToValue.put("Abstract", "'abstract'");
		tokenNameToValue.put("Constant", "'constant'");
		tokenNameToValue.put("Property", "'property'");
		tokenNameToValue.put("Component", "'component'");
		tokenNameToValue.put("Processor", "'processor'");
		tokenNameToValue.put("Subclause", "'subclause'");
		tokenNameToValue.put("Connection", "'connection'");
		tokenNameToValue.put("Subprogram", "'subprogram'");
 	}
 	
    public void setGrammarAccess(ExprGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleExprModel
entryRuleExprModel 
:
{ before(grammarAccess.getExprModelRule()); }
	 ruleExprModel
{ after(grammarAccess.getExprModelRule()); } 
	 EOF 
;

// Rule ExprModel
ruleExprModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprModelAccess().getAlternatives()); }
(rule__ExprModel__Alternatives)
{ after(grammarAccess.getExprModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprLibrary
entryRuleExprLibrary 
:
{ before(grammarAccess.getExprLibraryRule()); }
	 ruleExprLibrary
{ after(grammarAccess.getExprLibraryRule()); } 
	 EOF 
;

// Rule ExprLibrary
ruleExprLibrary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprLibraryAccess().getGroup()); }
(rule__ExprLibrary__Group__0)
{ after(grammarAccess.getExprLibraryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSubclause
entryRuleExprSubclause 
:
{ before(grammarAccess.getExprSubclauseRule()); }
	 ruleExprSubclause
{ after(grammarAccess.getExprSubclauseRule()); } 
	 EOF 
;

// Rule ExprSubclause
ruleExprSubclause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExprSubclauseAccess().getGroup()); }
(rule__ExprSubclause__Group__0)
{ after(grammarAccess.getExprSubclauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule Declarations
ruleDeclarations 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDeclarationsAccess().getGroup()); }
(rule__Declarations__Group__0)
{ after(grammarAccess.getDeclarationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEDeclaration
entryRuleEDeclaration 
:
{ before(grammarAccess.getEDeclarationRule()); }
	 ruleEDeclaration
{ after(grammarAccess.getEDeclarationRule()); } 
	 EOF 
;

// Rule EDeclaration
ruleEDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEDeclarationAccess().getAlternatives()); }
(rule__EDeclaration__Alternatives)
{ after(grammarAccess.getEDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDecl
entryRuleTypeDecl 
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruleTypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
(rule__TypeDecl__Group__0)
{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDecl
entryRuleVarDecl 
:
{ before(grammarAccess.getVarDeclRule()); }
	 ruleVarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVarDeclAccess().getGroup()); }
(rule__VarDecl__Group__0)
{ after(grammarAccess.getVarDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunDecl
entryRuleFunDecl 
:
{ before(grammarAccess.getFunDeclRule()); }
	 ruleFunDecl
{ after(grammarAccess.getFunDeclRule()); } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunDeclAccess().getGroup()); }
(rule__FunDecl__Group__0)
{ after(grammarAccess.getFunDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaFQN
entryRuleJavaFQN 
:
{ before(grammarAccess.getJavaFQNRule()); }
	 ruleJavaFQN
{ after(grammarAccess.getJavaFQNRule()); } 
	 EOF 
;

// Rule JavaFQN
ruleJavaFQN 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJavaFQNAccess().getGroup()); }
(rule__JavaFQN__Group__0)
{ after(grammarAccess.getJavaFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Args
ruleArgs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArgsAccess().getGroup()); }
(rule__Args__Group__0)?
{ after(grammarAccess.getArgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArgumentAccess().getGroup()); }
(rule__Argument__Group__0)
{ after(grammarAccess.getArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssertion
entryRuleAssertion 
:
{ before(grammarAccess.getAssertionRule()); }
	 ruleAssertion
{ after(grammarAccess.getAssertionRule()); } 
	 EOF 
;

// Rule Assertion
ruleAssertion 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssertionAccess().getGroup()); }
(rule__Assertion__Group__0)
{ after(grammarAccess.getAssertionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleENumberType
entryRuleENumberType 
:
{ before(grammarAccess.getENumberTypeRule()); }
	 ruleENumberType
{ after(grammarAccess.getENumberTypeRule()); } 
	 EOF 
;

// Rule ENumberType
ruleENumberType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getENumberTypeAccess().getAlternatives()); }
(rule__ENumberType__Alternatives)
{ after(grammarAccess.getENumberTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInteger
entryRuleEInteger 
:
{ before(grammarAccess.getEIntegerRule()); }
	 ruleEInteger
{ after(grammarAccess.getEIntegerRule()); } 
	 EOF 
;

// Rule EInteger
ruleEInteger 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEIntegerAccess().getGroup()); }
(rule__EInteger__Group__0)
{ after(grammarAccess.getEIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEReal
entryRuleEReal 
:
{ before(grammarAccess.getERealRule()); }
	 ruleEReal
{ after(grammarAccess.getERealRule()); } 
	 EOF 
;

// Rule EReal
ruleEReal 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getERealAccess().getGroup()); }
(rule__EReal__Group__0)
{ after(grammarAccess.getERealAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeType
entryRuleRangeType 
:
{ before(grammarAccess.getRangeTypeRule()); }
	 ruleRangeType
{ after(grammarAccess.getRangeTypeRule()); } 
	 EOF 
;

// Rule RangeType
ruleRangeType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeTypeAccess().getGroup()); }
(rule__RangeType__Group__0)
{ after(grammarAccess.getRangeTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCategory
entryRuleCategory 
:
{ before(grammarAccess.getCategoryRule()); }
	 ruleCategory
{ after(grammarAccess.getCategoryRule()); } 
	 EOF 
;

// Rule Category
ruleCategory 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCategoryAccess().getCategoryAssignment()); }
(rule__Category__CategoryAssignment)
{ after(grammarAccess.getCategoryAccess().getCategoryAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentCategory
entryRuleComponentCategory 
:
{ before(grammarAccess.getComponentCategoryRule()); }
	 ruleComponentCategory
{ after(grammarAccess.getComponentCategoryRule()); } 
	 EOF 
;

// Rule ComponentCategory
ruleComponentCategory 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentCategoryAccess().getAlternatives()); }
(rule__ComponentCategory__Alternatives)
{ after(grammarAccess.getComponentCategoryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMetaClass
entryRuleMetaClass 
:
{ before(grammarAccess.getMetaClassRule()); }
	 ruleMetaClass
{ after(grammarAccess.getMetaClassRule()); } 
	 EOF 
;

// Rule MetaClass
ruleMetaClass 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMetaClassAccess().getClassAssignment()); }
(rule__MetaClass__ClassAssignment)
{ after(grammarAccess.getMetaClassAccess().getClassAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordType
entryRuleRecordType 
:
{ before(grammarAccess.getRecordTypeRule()); }
	 ruleRecordType
{ after(grammarAccess.getRecordTypeRule()); } 
	 EOF 
;

// Rule RecordType
ruleRecordType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordTypeAccess().getGroup()); }
(rule__RecordType__Group__0)
{ after(grammarAccess.getRecordTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionType
entryRuleUnionType 
:
{ before(grammarAccess.getUnionTypeRule()); }
	 ruleUnionType
{ after(grammarAccess.getUnionTypeRule()); } 
	 EOF 
;

// Rule UnionType
ruleUnionType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnionTypeAccess().getGroup()); }
(rule__UnionType__Group__0)
{ after(grammarAccess.getUnionTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleType
entryRuleTupleType 
:
{ before(grammarAccess.getTupleTypeRule()); }
	 ruleTupleType
{ after(grammarAccess.getTupleTypeRule()); } 
	 EOF 
;

// Rule TupleType
ruleTupleType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleTypeAccess().getGroup()); }
(rule__TupleType__Group__0)
{ after(grammarAccess.getTupleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleField
entryRuleTupleField 
:
{ before(grammarAccess.getTupleFieldRule()); }
	 ruleTupleField
{ after(grammarAccess.getTupleFieldRule()); } 
	 EOF 
;

// Rule TupleField
ruleTupleField 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleFieldAccess().getTypeAssignment()); }
(rule__TupleField__TypeAssignment)
{ after(grammarAccess.getTupleFieldAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListType
entryRuleListType 
:
{ before(grammarAccess.getListTypeRule()); }
	 ruleListType
{ after(grammarAccess.getListTypeRule()); } 
	 EOF 
;

// Rule ListType
ruleListType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getListTypeAccess().getGroup()); }
(rule__ListType__Group__0)
{ after(grammarAccess.getListTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetType
entryRuleSetType 
:
{ before(grammarAccess.getSetTypeRule()); }
	 ruleSetType
{ after(grammarAccess.getSetTypeRule()); } 
	 EOF 
;

// Rule SetType
ruleSetType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetTypeAccess().getGroup()); }
(rule__SetType__Group__0)
{ after(grammarAccess.getSetTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBagType
entryRuleBagType 
:
{ before(grammarAccess.getBagTypeRule()); }
	 ruleBagType
{ after(grammarAccess.getBagTypeRule()); } 
	 EOF 
;

// Rule BagType
ruleBagType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBagTypeAccess().getGroup()); }
(rule__BagType__Group__0)
{ after(grammarAccess.getBagTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapType
entryRuleMapType 
:
{ before(grammarAccess.getMapTypeRule()); }
	 ruleMapType
{ after(grammarAccess.getMapTypeRule()); } 
	 EOF 
;

// Rule MapType
ruleMapType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMapTypeAccess().getGroup()); }
(rule__MapType__Group__0)
{ after(grammarAccess.getMapTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumType
entryRuleEnumType 
:
{ before(grammarAccess.getEnumTypeRule()); }
	 ruleEnumType
{ after(grammarAccess.getEnumTypeRule()); } 
	 EOF 
;

// Rule EnumType
ruleEnumType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEnumTypeAccess().getGroup()); }
(rule__EnumType__Group__0)
{ after(grammarAccess.getEnumTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral 
:
{ before(grammarAccess.getEnumLiteralRule()); }
	 ruleEnumLiteral
{ after(grammarAccess.getEnumLiteralRule()); } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEnumLiteralAccess().getNameAssignment()); }
(rule__EnumLiteral__NameAssignment)
{ after(grammarAccess.getEnumLiteralAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeRef
entryRuleTypeRef 
:
{ before(grammarAccess.getTypeRefRule()); }
	 ruleTypeRef
{ after(grammarAccess.getTypeRefRule()); } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeRefAccess().getRefAssignment()); }
(rule__TypeRef__RefAssignment)
{ after(grammarAccess.getTypeRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockExpression
entryRuleBlockExpression 
:
{ before(grammarAccess.getBlockExpressionRule()); }
	 ruleBlockExpression
{ after(grammarAccess.getBlockExpressionRule()); } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup()); }
(rule__BlockExpression__Group__0)
{ after(grammarAccess.getBlockExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpOr
entryRuleOpOr 
:
{ before(grammarAccess.getOpOrRule()); }
	 ruleOpOr
{ after(grammarAccess.getOpOrRule()); } 
	 EOF 
;

// Rule OpOr
ruleOpOr 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpOrAccess().getAlternatives()); }
(rule__OpOr__Alternatives)
{ after(grammarAccess.getOpOrAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAnd
entryRuleOpAnd 
:
{ before(grammarAccess.getOpAndRule()); }
	 ruleOpAnd
{ after(grammarAccess.getOpAndRule()); } 
	 EOF 
;

// Rule OpAnd
ruleOpAnd 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpAndAccess().getAlternatives()); }
(rule__OpAnd__Alternatives)
{ after(grammarAccess.getOpAndAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpEquality
entryRuleOpEquality 
:
{ before(grammarAccess.getOpEqualityRule()); }
	 ruleOpEquality
{ after(grammarAccess.getOpEqualityRule()); } 
	 EOF 
;

// Rule OpEquality
ruleOpEquality 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpEqualityAccess().getAlternatives()); }
(rule__OpEquality__Alternatives)
{ after(grammarAccess.getOpEqualityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpCompare
entryRuleOpCompare 
:
{ before(grammarAccess.getOpCompareRule()); }
	 ruleOpCompare
{ after(grammarAccess.getOpCompareRule()); } 
	 EOF 
;

// Rule OpCompare
ruleOpCompare 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpCompareAccess().getAlternatives()); }
(rule__OpCompare__Alternatives)
{ after(grammarAccess.getOpCompareAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAdd
entryRuleOpAdd 
:
{ before(grammarAccess.getOpAddRule()); }
	 ruleOpAdd
{ after(grammarAccess.getOpAddRule()); } 
	 EOF 
;

// Rule OpAdd
ruleOpAdd 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpAddAccess().getAlternatives()); }
(rule__OpAdd__Alternatives)
{ after(grammarAccess.getOpAddAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpMulti
entryRuleOpMulti 
:
{ before(grammarAccess.getOpMultiRule()); }
	 ruleOpMulti
{ after(grammarAccess.getOpMultiRule()); } 
	 EOF 
;

// Rule OpMulti
ruleOpMulti 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpMultiAccess().getAlternatives()); }
(rule__OpMulti__Alternatives)
{ after(grammarAccess.getOpMultiAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
(rule__UnaryOperation__Alternatives)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpUnary
entryRuleOpUnary 
:
{ before(grammarAccess.getOpUnaryRule()); }
	 ruleOpUnary
{ after(grammarAccess.getOpUnaryRule()); } 
	 EOF 
;

// Rule OpUnary
ruleOpUnary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpUnaryAccess().getAlternatives()); }
(rule__OpUnary__Alternatives)
{ after(grammarAccess.getOpUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpression
entryRuleUnitExpression 
:
{ before(grammarAccess.getUnitExpressionRule()); }
	 ruleUnitExpression
{ after(grammarAccess.getUnitExpressionRule()); } 
	 EOF 
;

// Rule UnitExpression
ruleUnitExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnitExpressionAccess().getGroup()); }
(rule__UnitExpression__Group__0)
{ after(grammarAccess.getUnitExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyExpression
entryRulePropertyExpression 
:
{ before(grammarAccess.getPropertyExpressionRule()); }
	 rulePropertyExpression
{ after(grammarAccess.getPropertyExpressionRule()); } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyExpressionAccess().getGroup()); }
(rule__PropertyExpression__Group__0)
{ after(grammarAccess.getPropertyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectExpression
entryRuleSelectExpression 
:
{ before(grammarAccess.getSelectExpressionRule()); }
	 ruleSelectExpression
{ after(grammarAccess.getSelectExpressionRule()); } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup()); }
(rule__SelectExpression__Group__0)
{ after(grammarAccess.getSelectExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedElementRef
entryRuleNamedElementRef 
:
{ before(grammarAccess.getNamedElementRefRule()); }
	 ruleNamedElementRef
{ after(grammarAccess.getNamedElementRefRule()); } 
	 EOF 
;

// Rule NamedElementRef
ruleNamedElementRef 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNamedElementRefAccess().getGroup()); }
(rule__NamedElementRef__Group__0)
{ after(grammarAccess.getNamedElementRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpression
entryRuleRangeExpression 
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
(rule__RangeExpression__Group__0)
{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpression
entryRuleIfExpression 
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
(rule__IfExpression__Group__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleWrappedNamedElement
entryRuleWrappedNamedElement 
:
{ before(grammarAccess.getWrappedNamedElementRule()); }
	 ruleWrappedNamedElement
{ after(grammarAccess.getWrappedNamedElementRule()); } 
	 EOF 
;

// Rule WrappedNamedElement
ruleWrappedNamedElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWrappedNamedElementAccess().getGroup()); }
(rule__WrappedNamedElement__Group__0)
{ after(grammarAccess.getWrappedNamedElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEBooleanLiteral
entryRuleEBooleanLiteral 
:
{ before(grammarAccess.getEBooleanLiteralRule()); }
	 ruleEBooleanLiteral
{ after(grammarAccess.getEBooleanLiteralRule()); } 
	 EOF 
;

// Rule EBooleanLiteral
ruleEBooleanLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEBooleanLiteralAccess().getGroup()); }
(rule__EBooleanLiteral__Group__0)
{ after(grammarAccess.getEBooleanLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEIntegerLiteral
entryRuleEIntegerLiteral 
:
{ before(grammarAccess.getEIntegerLiteralRule()); }
	 ruleEIntegerLiteral
{ after(grammarAccess.getEIntegerLiteralRule()); } 
	 EOF 
;

// Rule EIntegerLiteral
ruleEIntegerLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEIntegerLiteralAccess().getGroup()); }
(rule__EIntegerLiteral__Group__0)
{ after(grammarAccess.getEIntegerLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleERealLiteral
entryRuleERealLiteral 
:
{ before(grammarAccess.getERealLiteralRule()); }
	 ruleERealLiteral
{ after(grammarAccess.getERealLiteralRule()); } 
	 EOF 
;

// Rule ERealLiteral
ruleERealLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getERealLiteralAccess().getGroup()); }
(rule__ERealLiteral__Group__0)
{ after(grammarAccess.getERealLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedReal
entryRuleSignedReal 
:
{ before(grammarAccess.getSignedRealRule()); }
	 ruleSignedReal
{ after(grammarAccess.getSignedRealRule()); } 
	 EOF 
;

// Rule SignedReal
ruleSignedReal 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignedRealAccess().getREAL_LITTerminalRuleCall()); }
	RULE_REAL_LIT
{ after(grammarAccess.getSignedRealAccess().getREAL_LITTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEStringLiteral
entryRuleEStringLiteral 
:
{ before(grammarAccess.getEStringLiteralRule()); }
	 ruleEStringLiteral
{ after(grammarAccess.getEStringLiteralRule()); } 
	 EOF 
;

// Rule EStringLiteral
ruleEStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEStringLiteralAccess().getGroup()); }
(rule__EStringLiteral__Group__0)
{ after(grammarAccess.getEStringLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ExpressionList
ruleExpressionList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListLiteral
entryRuleListLiteral 
:
{ before(grammarAccess.getListLiteralRule()); }
	 ruleListLiteral
{ after(grammarAccess.getListLiteralRule()); } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getListLiteralAccess().getGroup()); }
(rule__ListLiteral__Group__0)
{ after(grammarAccess.getListLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetLiteral
entryRuleSetLiteral 
:
{ before(grammarAccess.getSetLiteralRule()); }
	 ruleSetLiteral
{ after(grammarAccess.getSetLiteralRule()); } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetLiteralAccess().getGroup()); }
(rule__SetLiteral__Group__0)
{ after(grammarAccess.getSetLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordLiteral
entryRuleRecordLiteral 
:
{ before(grammarAccess.getRecordLiteralRule()); }
	 ruleRecordLiteral
{ after(grammarAccess.getRecordLiteralRule()); } 
	 EOF 
;

// Rule RecordLiteral
ruleRecordLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordLiteralAccess().getGroup()); }
(rule__RecordLiteral__Group__0)
{ after(grammarAccess.getRecordLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldValue
entryRuleFieldValue 
:
{ before(grammarAccess.getFieldValueRule()); }
	 ruleFieldValue
{ after(grammarAccess.getFieldValueRule()); } 
	 EOF 
;

// Rule FieldValue
ruleFieldValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFieldValueAccess().getGroup()); }
(rule__FieldValue__Group__0)
{ after(grammarAccess.getFieldValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionLiteral
entryRuleUnionLiteral 
:
{ before(grammarAccess.getUnionLiteralRule()); }
	 ruleUnionLiteral
{ after(grammarAccess.getUnionLiteralRule()); } 
	 EOF 
;

// Rule UnionLiteral
ruleUnionLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnionLiteralAccess().getGroup()); }
(rule__UnionLiteral__Group__0)
{ after(grammarAccess.getUnionLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleLiteral
entryRuleTupleLiteral 
:
{ before(grammarAccess.getTupleLiteralRule()); }
	 ruleTupleLiteral
{ after(grammarAccess.getTupleLiteralRule()); } 
	 EOF 
;

// Rule TupleLiteral
ruleTupleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleLiteralAccess().getGroup()); }
(rule__TupleLiteral__Group__0)
{ after(grammarAccess.getTupleLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBagLiteral
entryRuleBagLiteral 
:
{ before(grammarAccess.getBagLiteralRule()); }
	 ruleBagLiteral
{ after(grammarAccess.getBagLiteralRule()); } 
	 EOF 
;

// Rule BagLiteral
ruleBagLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBagLiteralAccess().getGroup()); }
(rule__BagLiteral__Group__0)
{ after(grammarAccess.getBagLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapLiteral
entryRuleMapLiteral 
:
{ before(grammarAccess.getMapLiteralRule()); }
	 ruleMapLiteral
{ after(grammarAccess.getMapLiteralRule()); } 
	 EOF 
;

// Rule MapLiteral
ruleMapLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMapLiteralAccess().getGroup()); }
(rule__MapLiteral__Group__0)
{ after(grammarAccess.getMapLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQCREF
entryRuleQCREF 
:
{ before(grammarAccess.getQCREFRule()); }
	 ruleQCREF
{ after(grammarAccess.getQCREFRule()); } 
	 EOF 
;

// Rule QCREF
ruleQCREF 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQCREFAccess().getGroup()); }
(rule__QCREF__Group__0)
{ after(grammarAccess.getQCREFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation 
:
{ before(grammarAccess.getContainedPropertyAssociationRule()); }
	 ruleContainedPropertyAssociation
{ after(grammarAccess.getContainedPropertyAssociationRule()); } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup()); }
(rule__ContainedPropertyAssociation__Group__0)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyAssociation
entryRulePropertyAssociation 
:
{ before(grammarAccess.getPropertyAssociationRule()); }
	 rulePropertyAssociation
{ after(grammarAccess.getPropertyAssociationRule()); } 
	 EOF 
;

// Rule PropertyAssociation
rulePropertyAssociation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyAssociationAccess().getGroup()); }
(rule__PropertyAssociation__Group__0)
{ after(grammarAccess.getPropertyAssociationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleContainmentPath
entryRuleContainmentPath 
:
{ before(grammarAccess.getContainmentPathRule()); }
	 ruleContainmentPath
{ after(grammarAccess.getContainmentPathRule()); } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContainmentPathAccess().getPathAssignment()); }
(rule__ContainmentPath__PathAssignment)
{ after(grammarAccess.getContainmentPathAccess().getPathAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue 
:
{ before(grammarAccess.getOptionalModalPropertyValueRule()); }
	 ruleOptionalModalPropertyValue
{ after(grammarAccess.getOptionalModalPropertyValueRule()); } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getGroup()); }
(rule__OptionalModalPropertyValue__Group__0)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValue
entryRulePropertyValue 
:
{ before(grammarAccess.getPropertyValueRule()); }
	 rulePropertyValue
{ after(grammarAccess.getPropertyValueRule()); } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPropertyValueAccess().getOwnedValueAssignment()); }
(rule__PropertyValue__OwnedValueAssignment)
{ after(grammarAccess.getPropertyValueAccess().getOwnedValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleConstantValue
entryRuleConstantValue 
:
{ before(grammarAccess.getConstantValueRule()); }
	 ruleConstantValue
{ after(grammarAccess.getConstantValueRule()); } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstantValueAccess().getNamedValueAssignment()); }
(rule__ConstantValue__NamedValueAssignment)
{ after(grammarAccess.getConstantValueAccess().getNamedValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}















// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation 
:
{ before(grammarAccess.getFieldPropertyAssociationRule()); }
	 ruleFieldPropertyAssociation
{ after(grammarAccess.getFieldPropertyAssociationRule()); } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getGroup()); }
(rule__FieldPropertyAssociation__Group__0)
{ after(grammarAccess.getFieldPropertyAssociationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement 
:
{ before(grammarAccess.getContainmentPathElementRule()); }
	 ruleContainmentPathElement
{ after(grammarAccess.getContainmentPathElementRule()); } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getContainmentPathElementAccess().getGroup()); }
(rule__ContainmentPathElement__Group__0)
{ after(grammarAccess.getContainmentPathElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePlusMinus
entryRulePlusMinus 
:
{ before(grammarAccess.getPlusMinusRule()); }
	 rulePlusMinus
{ after(grammarAccess.getPlusMinusRule()); } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPlusMinusAccess().getAlternatives()); }
(rule__PlusMinus__Alternatives)
{ after(grammarAccess.getPlusMinusAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString 
:
{ before(grammarAccess.getNoQuoteStringRule()); }
	 ruleNoQuoteString
{ after(grammarAccess.getNoQuoteStringRule()); } 
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayRange
entryRuleArrayRange 
:
{ before(grammarAccess.getArrayRangeRule()); }
	 ruleArrayRange
{ after(grammarAccess.getArrayRangeRule()); } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArrayRangeAccess().getGroup()); }
(rule__ArrayRange__Group__0)
{ after(grammarAccess.getArrayRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedConstant
entryRuleSignedConstant 
:
{ before(grammarAccess.getSignedConstantRule()); }
	 ruleSignedConstant
{ after(grammarAccess.getSignedConstantRule()); } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignedConstantAccess().getGroup()); }
(rule__SignedConstant__Group__0)
{ after(grammarAccess.getSignedConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm 
:
{ before(grammarAccess.getIntegerTermRule()); }
	 ruleIntegerTerm
{ after(grammarAccess.getIntegerTermRule()); } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntegerTermAccess().getGroup()); }
(rule__IntegerTerm__Group__0)
{ after(grammarAccess.getIntegerTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealTerm
entryRuleRealTerm 
:
{ before(grammarAccess.getRealTermRule()); }
	 ruleRealTerm
{ after(grammarAccess.getRealTermRule()); } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRealTermAccess().getGroup()); }
(rule__RealTerm__Group__0)
{ after(grammarAccess.getRealTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNumAlt
entryRuleNumAlt 
:
{ before(grammarAccess.getNumAltRule()); }
	 ruleNumAlt
{ after(grammarAccess.getNumAltRule()); } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumAltAccess().getAlternatives()); }
(rule__NumAlt__Alternatives)
{ after(grammarAccess.getNumAltAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppliesToKeywords
entryRuleAppliesToKeywords 
:
{ before(grammarAccess.getAppliesToKeywordsRule()); }
	 ruleAppliesToKeywords
{ after(grammarAccess.getAppliesToKeywordsRule()); } 
	 EOF 
;

// Rule AppliesToKeywords
ruleAppliesToKeywords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAppliesToKeywordsAccess().getGroup()); }
(rule__AppliesToKeywords__Group__0)
{ after(grammarAccess.getAppliesToKeywordsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInBindingKeywords
entryRuleInBindingKeywords 
:
{ before(grammarAccess.getInBindingKeywordsRule()); }
	 ruleInBindingKeywords
{ after(grammarAccess.getInBindingKeywordsRule()); } 
	 EOF 
;

// Rule InBindingKeywords
ruleInBindingKeywords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInBindingKeywordsAccess().getGroup()); }
(rule__InBindingKeywords__Group__0)
{ after(grammarAccess.getInBindingKeywordsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInModesKeywords
entryRuleInModesKeywords 
:
{ before(grammarAccess.getInModesKeywordsRule()); }
	 ruleInModesKeywords
{ after(grammarAccess.getInModesKeywordsRule()); } 
	 EOF 
;

// Rule InModesKeywords
ruleInModesKeywords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInModesKeywordsAccess().getGroup()); }
(rule__InModesKeywords__Group__0)
{ after(grammarAccess.getInModesKeywordsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINTVALUE
entryRuleINTVALUE 
:
{ before(grammarAccess.getINTVALUERule()); }
	 ruleINTVALUE
{ after(grammarAccess.getINTVALUERule()); } 
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); }
	RULE_INTEGER_LIT
{ after(grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleQPREF
entryRuleQPREF 
:
{ before(grammarAccess.getQPREFRule()); }
	 ruleQPREF
{ after(grammarAccess.getQPREFRule()); } 
	 EOF 
;

// Rule QPREF
ruleQPREF 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQPREFAccess().getGroup()); }
(rule__QPREF__Group__0)
{ after(grammarAccess.getQPREFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSTAR
entryRuleSTAR 
:
{ before(grammarAccess.getSTARRule()); }
	 ruleSTAR
{ after(grammarAccess.getSTARRule()); } 
	 EOF 
;

// Rule STAR
ruleSTAR 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSTARAccess().getAsteriskKeyword()); }

	Asterisk 

{ after(grammarAccess.getSTARAccess().getAsteriskKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule MetaClassEnum
ruleMetaClassEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassEnumAccess().getAlternatives()); }
(rule__MetaClassEnum__Alternatives)
{ after(grammarAccess.getMetaClassEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ExprModel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getGroup_0()); }
(rule__ExprModel__Group_0__0)
{ after(grammarAccess.getExprModelAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprModelAccess().getGroup_1()); }
(rule__ExprModel__Group_1__0)
{ after(grammarAccess.getExprModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDeclarationAccess().getTypeDeclParserRuleCall_0()); }
	ruleTypeDecl
{ after(grammarAccess.getEDeclarationAccess().getTypeDeclParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEDeclarationAccess().getVarDeclParserRuleCall_1()); }
	ruleVarDecl
{ after(grammarAccess.getEDeclarationAccess().getVarDeclParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEDeclarationAccess().getFunDeclParserRuleCall_2()); }
	ruleFunDecl
{ after(grammarAccess.getEDeclarationAccess().getFunDeclParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEDeclarationAccess().getAssertionParserRuleCall_3()); }
	ruleAssertion
{ after(grammarAccess.getEDeclarationAccess().getAssertionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getConstAssignment_0_0()); }
(rule__VarDecl__ConstAssignment_0_0)
{ after(grammarAccess.getVarDeclAccess().getConstAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getVarDeclAccess().getVarKeyword_0_1()); }

	Var 

{ after(grammarAccess.getVarDeclAccess().getVarKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Alternatives_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getGroup_7_1_0()); }
(rule__FunDecl__Group_7_1_0__0)
{ after(grammarAccess.getFunDeclAccess().getGroup_7_1_0()); }
)

    |(
{ before(grammarAccess.getFunDeclAccess().getExpAssignment_7_1_1()); }
(rule__FunDecl__ExpAssignment_7_1_1)
{ after(grammarAccess.getFunDeclAccess().getExpAssignment_7_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRangeTypeParserRuleCall_1()); }
	ruleRangeType
{ after(grammarAccess.getTypeAccess().getRangeTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getCategoryParserRuleCall_2()); }
	ruleCategory
{ after(grammarAccess.getTypeAccess().getCategoryParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getMetaClassParserRuleCall_3()); }
	ruleMetaClass
{ after(grammarAccess.getTypeAccess().getMetaClassParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_4()); }
	ruleRecordType
{ after(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getUnionTypeParserRuleCall_5()); }
	ruleUnionType
{ after(grammarAccess.getTypeAccess().getUnionTypeParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_6()); }
	ruleTupleType
{ after(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getListTypeParserRuleCall_7()); }
	ruleListType
{ after(grammarAccess.getTypeAccess().getListTypeParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSetTypeParserRuleCall_8()); }
	ruleSetType
{ after(grammarAccess.getTypeAccess().getSetTypeParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBagTypeParserRuleCall_9()); }
	ruleBagType
{ after(grammarAccess.getTypeAccess().getBagTypeParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_10()); }
	ruleMapType
{ after(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_11()); }
	ruleEnumType
{ after(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTypeRefParserRuleCall_12()); }
	ruleTypeRef
{ after(grammarAccess.getTypeAccess().getTypeRefParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
(rule__PrimitiveType__Group_0__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getENumberTypeParserRuleCall_1()); }
	ruleENumberType
{ after(grammarAccess.getPrimitiveTypeAccess().getENumberTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_2()); }
(rule__PrimitiveType__Group_2__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ENumberType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENumberTypeAccess().getEIntegerParserRuleCall_0()); }
	ruleEInteger
{ after(grammarAccess.getENumberTypeAccess().getEIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getENumberTypeAccess().getERealParserRuleCall_1()); }
	ruleEReal
{ after(grammarAccess.getENumberTypeAccess().getERealParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getAbstractKeyword_0()); }

	Abstract 

{ after(grammarAccess.getComponentCategoryAccess().getAbstractKeyword_0()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getBusKeyword_1()); }

	Bus 

{ after(grammarAccess.getComponentCategoryAccess().getBusKeyword_1()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getDataKeyword_2()); }

	Data 

{ after(grammarAccess.getComponentCategoryAccess().getDataKeyword_2()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getDeviceKeyword_3()); }

	Device 

{ after(grammarAccess.getComponentCategoryAccess().getDeviceKeyword_3()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getMemoryKeyword_4()); }

	Memory 

{ after(grammarAccess.getComponentCategoryAccess().getMemoryKeyword_4()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getProcessKeyword_5()); }

	Process 

{ after(grammarAccess.getComponentCategoryAccess().getProcessKeyword_5()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getProcessorKeyword_6()); }

	Processor 

{ after(grammarAccess.getComponentCategoryAccess().getProcessorKeyword_6()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_7()); }

	Subprogram 

{ after(grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_7()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getGroup_8()); }
(rule__ComponentCategory__Group_8__0)
{ after(grammarAccess.getComponentCategoryAccess().getGroup_8()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getSystemKeyword_9()); }

	KW_System 

{ after(grammarAccess.getComponentCategoryAccess().getSystemKeyword_9()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getGroup_10()); }
(rule__ComponentCategory__Group_10__0)
{ after(grammarAccess.getComponentCategoryAccess().getGroup_10()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getThreadKeyword_11()); }

	Thread 

{ after(grammarAccess.getComponentCategoryAccess().getThreadKeyword_11()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getGroup_12()); }
(rule__ComponentCategory__Group_12__0)
{ after(grammarAccess.getComponentCategoryAccess().getGroup_12()); }
)

    |(
{ before(grammarAccess.getComponentCategoryAccess().getGroup_13()); }
(rule__ComponentCategory__Group_13__0)
{ after(grammarAccess.getComponentCategoryAccess().getGroup_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBlockExpressionParserRuleCall_1()); }
	ruleBlockExpression
{ after(grammarAccess.getExpressionAccess().getBlockExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpOr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOrAccess().getOrKeyword_0()); }

	Or 

{ after(grammarAccess.getOpOrAccess().getOrKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword_1()); }

	VerticalLineVerticalLine 

{ after(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpAnd__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpAndAccess().getAndKeyword_0()); }

	And 

{ after(grammarAccess.getOpAndAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword_1()); }

	AmpersandAmpersand 

{ after(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpEquality__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }

	EqualsSignEqualsSign 

{ after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }

	ExclamationMarkEqualsSign 

{ after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }

	GreaterThanSignEqualsSign 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_1()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }

	GreaterThanSign 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }

	LessThanSign 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignLessThanSignKeyword_4()); }

	GreaterThanSignLessThanSign 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignLessThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpAdd__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }

	PlusSign 

{ after(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }

	HyphenMinus 

{ after(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpMulti__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }

	Asterisk 

{ after(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getSolidusKeyword_1()); }

	Solidus 

{ after(grammarAccess.getOpMultiAccess().getSolidusKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getDivKeyword_2()); }

	Div 

{ after(grammarAccess.getOpMultiAccess().getDivKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getModKeyword_3()); }

	Mod 

{ after(grammarAccess.getOpMultiAccess().getModKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
(rule__UnaryOperation__Group_0__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getUnitExpressionParserRuleCall_1()); }
	ruleUnitExpression
{ after(grammarAccess.getUnaryOperationAccess().getUnitExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpUnary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpUnaryAccess().getNotKeyword_0()); }

	Not 

{ after(grammarAccess.getOpUnaryAccess().getNotKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }

	HyphenMinus 

{ after(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); }

	PlusSign 

{ after(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getConvertAssignment_1_1_0()); }
(rule__UnitExpression__ConvertAssignment_1_1_0)
{ after(grammarAccess.getUnitExpressionAccess().getConvertAssignment_1_1_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionAccess().getDropAssignment_1_1_1()); }
(rule__UnitExpression__DropAssignment_1_1_1)
{ after(grammarAccess.getUnitExpressionAccess().getDropAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNamedElementRefParserRuleCall_0()); }
	ruleNamedElementRef
{ after(grammarAccess.getPrimaryExpressionAccess().getNamedElementRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getRangeExpressionParserRuleCall_1()); }
	ruleRangeExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getRangeExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_2()); }
	ruleIfExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
(rule__PrimaryExpression__Group_4__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getEBooleanLiteralParserRuleCall_0()); }
	ruleEBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getEBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getEStringLiteralParserRuleCall_2()); }
	ruleEStringLiteral
{ after(grammarAccess.getLiteralAccess().getEStringLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_3()); }
	ruleListLiteral
{ after(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSetLiteralParserRuleCall_4()); }
	ruleSetLiteral
{ after(grammarAccess.getLiteralAccess().getSetLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getRecordLiteralParserRuleCall_5()); }
	ruleRecordLiteral
{ after(grammarAccess.getLiteralAccess().getRecordLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getUnionLiteralParserRuleCall_6()); }
	ruleUnionLiteral
{ after(grammarAccess.getLiteralAccess().getUnionLiteralParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getTupleLiteralParserRuleCall_7()); }
	ruleTupleLiteral
{ after(grammarAccess.getLiteralAccess().getTupleLiteralParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBagLiteralParserRuleCall_8()); }
	ruleBagLiteral
{ after(grammarAccess.getLiteralAccess().getBagLiteralParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_9()); }
	ruleMapLiteral
{ after(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EBooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanLiteralAccess().getValueAssignment_1_0()); }
(rule__EBooleanLiteral__ValueAssignment_1_0)
{ after(grammarAccess.getEBooleanLiteralAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getEBooleanLiteralAccess().getFalseKeyword_1_1()); }

	False 

{ after(grammarAccess.getEBooleanLiteralAccess().getFalseKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getEIntegerLiteralParserRuleCall_0()); }
	ruleEIntegerLiteral
{ after(grammarAccess.getNumberLiteralAccess().getEIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getERealLiteralParserRuleCall_1()); }
	ruleERealLiteral
{ after(grammarAccess.getNumberLiteralAccess().getERealLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppendAssignment_1_1()); }
(rule__ContainedPropertyAssociation__AppendAssignment_1_1)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppendAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getPropertyAssociationAccess().getAppendAssignment_1_1()); }
(rule__PropertyAssociation__AppendAssignment_1_1)
{ after(grammarAccess.getPropertyAssociationAccess().getAppendAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); }

	PlusSign 

{ after(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); }

	HyphenMinus 

{ after(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); }

	PlusSign 

{ after(grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); }

	HyphenMinus 

{ after(grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumAlt__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); }
	ruleRealTerm
{ after(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); }
	ruleIntegerTerm
{ after(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); }
	ruleSignedConstant
{ after(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); }
	ruleConstantValue
{ after(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaClassEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassEnumAccess().getCOMPONENTEnumLiteralDeclaration_0()); }
(	Component
)
{ after(grammarAccess.getMetaClassEnumAccess().getCOMPONENTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_1()); }
(	Feature
)
{ after(grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_2()); }
(	Connection
)
{ after(grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_3()); }
(	Flow
)
{ after(grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_4()); }
(	Mode
)
{ after(grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMetaClassEnumAccess().getPROPERTYEnumLiteralDeclaration_5()); }
(	Property
)
{ after(grammarAccess.getMetaClassEnumAccess().getPROPERTYEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__ExprModel__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_0__0__Impl
	rule__ExprModel__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getLibraryKeyword_0_0()); }

	Library 

{ after(grammarAccess.getExprModelAccess().getLibraryKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprModel__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexAssignment_0_1()); }
(rule__ExprModel__AnnexAssignment_0_1)
{ after(grammarAccess.getExprModelAccess().getAnnexAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprModel__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_1__0__Impl
	rule__ExprModel__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getSubclauseKeyword_1_0()); }

	Subclause 

{ after(grammarAccess.getExprModelAccess().getSubclauseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprModel__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprModel__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexAssignment_1_1()); }
(rule__ExprModel__AnnexAssignment_1_1)
{ after(grammarAccess.getExprModelAccess().getAnnexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprLibrary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprLibrary__Group__0__Impl
	rule__ExprLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprLibrary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprLibraryAccess().getExprLibraryAction_0()); }
(

)
{ after(grammarAccess.getExprLibraryAccess().getExprLibraryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprLibrary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprLibrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprLibrary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprLibraryAccess().getDeclarationsParserRuleCall_1()); }
(	ruleDeclarations)?
{ after(grammarAccess.getExprLibraryAccess().getDeclarationsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprSubclause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSubclause__Group__0__Impl
	rule__ExprSubclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSubclause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSubclauseAccess().getExprSubclauseAction_0()); }
(

)
{ after(grammarAccess.getExprSubclauseAccess().getExprSubclauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSubclause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSubclause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSubclause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSubclauseAccess().getDeclarationsParserRuleCall_1()); }
(	ruleDeclarations)?
{ after(grammarAccess.getExprSubclauseAccess().getDeclarationsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declarations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarations__Group__0__Impl
	rule__Declarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getDeclsAssignment_0()); }
(rule__Declarations__DeclsAssignment_0)
{ after(grammarAccess.getDeclarationsAccess().getDeclsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarations__Group__1__Impl
	rule__Declarations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getGroup_1()); }
(rule__Declarations__Group_1__0)*
{ after(grammarAccess.getDeclarationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getSemicolonKeyword_2()); }
(
	Semicolon 
)?
{ after(grammarAccess.getDeclarationsAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarations__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarations__Group_1__0__Impl
	rule__Declarations__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_0()); }

	Semicolon 

{ after(grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarations__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarations__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getDeclsAssignment_1_1()); }
(rule__Declarations__DeclsAssignment_1_1)
{ after(grammarAccess.getDeclarationsAccess().getDeclsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }

	Type 

{ after(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__1__Impl
	rule__TypeDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
(rule__TypeDecl__NameAssignment_1)
{ after(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__2__Impl
	rule__TypeDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getTypeDeclAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__3__Impl
	rule__TypeDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeAssignment_3()); }
(rule__TypeDecl__TypeAssignment_3)
{ after(grammarAccess.getTypeDeclAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getGroup_4()); }
(rule__TypeDecl__Group_4__0)?
{ after(grammarAccess.getTypeDeclAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TypeDecl__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4__0__Impl
	rule__TypeDecl__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getLeftCurlyBracketKeyword_4_0()); }

	LeftCurlyBracket 

{ after(grammarAccess.getTypeDeclAccess().getLeftCurlyBracketKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4__1__Impl
	rule__TypeDecl__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsAssignment_4_1()); }
(rule__TypeDecl__OwnedPropertyAssociationsAssignment_4_1)
{ after(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4__2__Impl
	rule__TypeDecl__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getGroup_4_2()); }
(rule__TypeDecl__Group_4_2__0)*
{ after(grammarAccess.getTypeDeclAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getRightCurlyBracketKeyword_4_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getTypeDeclAccess().getRightCurlyBracketKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeDecl__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4_2__0__Impl
	rule__TypeDecl__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4_2_0()); }

	Semicolon 

{ after(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsAssignment_4_2_1()); }
(rule__TypeDecl__OwnedPropertyAssociationsAssignment_4_2_1)
{ after(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getAlternatives_0()); }
(rule__VarDecl__Alternatives_0)
{ after(grammarAccess.getVarDeclAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__1__Impl
	rule__VarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
(rule__VarDecl__NameAssignment_1)
{ after(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__2__Impl
	rule__VarDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_2()); }
(rule__VarDecl__Group_2__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_3()); }
(rule__VarDecl__Group_3__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VarDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__0__Impl
	rule__VarDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }

	Colon 

{ after(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getDeclTypeAssignment_2_1()); }
(rule__VarDecl__DeclTypeAssignment_2_1)
{ after(grammarAccess.getVarDeclAccess().getDeclTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDecl__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_3__0__Impl
	rule__VarDecl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0()); }

	EqualsSign 

{ after(grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getValueAssignment_3_1()); }
(rule__VarDecl__ValueAssignment_3_1)
{ after(grammarAccess.getVarDeclAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__0__Impl
	rule__FunDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getDefKeyword_0()); }

	Def 

{ after(grammarAccess.getFunDeclAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__1__Impl
	rule__FunDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getNameAssignment_1()); }
(rule__FunDecl__NameAssignment_1)
{ after(grammarAccess.getFunDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__2__Impl
	rule__FunDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__3__Impl
	rule__FunDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getArgsParserRuleCall_3()); }
	ruleArgs
{ after(grammarAccess.getFunDeclAccess().getArgsParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__4__Impl
	rule__FunDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__5__Impl
	rule__FunDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getColonKeyword_5()); }

	Colon 

{ after(grammarAccess.getFunDeclAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__6__Impl
	rule__FunDecl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getResultTypeAssignment_6()); }
(rule__FunDecl__ResultTypeAssignment_6)
{ after(grammarAccess.getFunDeclAccess().getResultTypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getGroup_7()); }
(rule__FunDecl__Group_7__0)?
{ after(grammarAccess.getFunDeclAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__FunDecl__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group_7__0__Impl
	rule__FunDecl__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getEqualsSignKeyword_7_0()); }

	EqualsSign 

{ after(grammarAccess.getFunDeclAccess().getEqualsSignKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getAlternatives_7_1()); }
(rule__FunDecl__Alternatives_7_1)
{ after(grammarAccess.getFunDeclAccess().getAlternatives_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunDecl__Group_7_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group_7_1_0__0__Impl
	rule__FunDecl__Group_7_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group_7_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getJavaAssignment_7_1_0_0()); }
(rule__FunDecl__JavaAssignment_7_1_0_0)
{ after(grammarAccess.getFunDeclAccess().getJavaAssignment_7_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group_7_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group_7_1_0__1__Impl
	rule__FunDecl__Group_7_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group_7_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getColonKeyword_7_1_0_1()); }

	Colon 

{ after(grammarAccess.getFunDeclAccess().getColonKeyword_7_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDecl__Group_7_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDecl__Group_7_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__Group_7_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getFqnAssignment_7_1_0_2()); }
(rule__FunDecl__FqnAssignment_7_1_0_2)
{ after(grammarAccess.getFunDeclAccess().getFqnAssignment_7_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JavaFQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaFQN__Group__0__Impl
	rule__JavaFQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getJavaFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JavaFQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaFQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaFQNAccess().getGroup_1()); }
(rule__JavaFQN__Group_1__0)*
{ after(grammarAccess.getJavaFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JavaFQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaFQN__Group_1__0__Impl
	rule__JavaFQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaFQNAccess().getFullStopKeyword_1_0()); }

	FullStop 

{ after(grammarAccess.getJavaFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JavaFQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaFQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getJavaFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Args__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Args__Group__0__Impl
	rule__Args__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Args__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getArgsAssignment_0()); }
(rule__Args__ArgsAssignment_0)
{ after(grammarAccess.getArgsAccess().getArgsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Args__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Args__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Args__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getGroup_1()); }
(rule__Args__Group_1__0)*
{ after(grammarAccess.getArgsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Args__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Args__Group_1__0__Impl
	rule__Args__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Args__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getCommaKeyword_1_0()); }

	Comma 

{ after(grammarAccess.getArgsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Args__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Args__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Args__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getArgsAssignment_1_1()); }
(rule__Args__ArgsAssignment_1_1)
{ after(grammarAccess.getArgsAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getArgumentAction_0()); }
(

)
{ after(grammarAccess.getArgumentAccess().getArgumentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__1__Impl
	rule__Argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
(rule__Argument__NameAssignment_1)
{ after(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__2__Impl
	rule__Argument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getArgumentAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeAssignment_3()); }
(rule__Argument__TypeAssignment_3)
{ after(grammarAccess.getArgumentAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assertion__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__0__Impl
	rule__Assertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getAssertKeyword_0()); }

	Assert 

{ after(grammarAccess.getAssertionAccess().getAssertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__1__Impl
	rule__Assertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getNameAssignment_1()); }
(rule__Assertion__NameAssignment_1)
{ after(grammarAccess.getAssertionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__2__Impl
	rule__Assertion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getAssertionAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getAssertAssignment_3()); }
(rule__Assertion__AssertAssignment_3)
{ after(grammarAccess.getAssertionAccess().getAssertAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PrimitiveType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__0__Impl
	rule__PrimitiveType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getEBooleanAction_0_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getEBooleanAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBoolKeyword_0_1()); }

	Bool 

{ after(grammarAccess.getPrimitiveTypeAccess().getBoolKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_2__0__Impl
	rule__PrimitiveType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getEStringAction_2_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypeAccess().getEStringAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringKeyword_2_1()); }

	String 

{ after(grammarAccess.getPrimitiveTypeAccess().getStringKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EInteger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInteger__Group__0__Impl
	rule__EInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInteger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerAccess().getEIntegerAction_0()); }
(

)
{ after(grammarAccess.getEIntegerAccess().getEIntegerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInteger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInteger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerAccess().getIntKeyword_1()); }

	Int 

{ after(grammarAccess.getEIntegerAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EReal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EReal__Group__0__Impl
	rule__EReal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EReal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getERealAccess().getERealAction_0()); }
(

)
{ after(grammarAccess.getERealAccess().getERealAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EReal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EReal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EReal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getERealAccess().getRealKeyword_1()); }

	Real 

{ after(grammarAccess.getERealAccess().getRealKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__0__Impl
	rule__RangeType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getRangeKeyword_0()); }

	Range 

{ after(grammarAccess.getRangeTypeAccess().getRangeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__1__Impl
	rule__RangeType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getOfKeyword_1()); }

	Of 

{ after(grammarAccess.getRangeTypeAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getTypeAssignment_2()); }
(rule__RangeType__TypeAssignment_2)
{ after(grammarAccess.getRangeTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentCategory__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_8__0__Impl
	rule__ComponentCategory__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_8_0()); }

	Subprogram 

{ after(grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentCategory__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getGroupKeyword_8_1()); }

	Group 

{ after(grammarAccess.getComponentCategoryAccess().getGroupKeyword_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentCategory__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_10__0__Impl
	rule__ComponentCategory__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getThreadKeyword_10_0()); }

	Thread 

{ after(grammarAccess.getComponentCategoryAccess().getThreadKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentCategory__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getGroupKeyword_10_1()); }

	Group 

{ after(grammarAccess.getComponentCategoryAccess().getGroupKeyword_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentCategory__Group_12__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_12__0__Impl
	rule__ComponentCategory__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_12__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getVirtualKeyword_12_0()); }

	Virtual 

{ after(grammarAccess.getComponentCategoryAccess().getVirtualKeyword_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentCategory__Group_12__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_12__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_12__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getBusKeyword_12_1()); }

	Bus 

{ after(grammarAccess.getComponentCategoryAccess().getBusKeyword_12_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentCategory__Group_13__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_13__0__Impl
	rule__ComponentCategory__Group_13__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_13__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getVirtualKeyword_13_0()); }

	Virtual 

{ after(grammarAccess.getComponentCategoryAccess().getVirtualKeyword_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentCategory__Group_13__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentCategory__Group_13__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentCategory__Group_13__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentCategoryAccess().getProcessorKeyword_13_1()); }

	Processor 

{ after(grammarAccess.getComponentCategoryAccess().getProcessorKeyword_13_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__0__Impl
	rule__RecordType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
(

)
{ after(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__1__Impl
	rule__RecordType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }

	Record 

{ after(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__2__Impl
	rule__RecordType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__3__Impl
	rule__RecordType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getGroup_3()); }
(rule__RecordType__Group_3__0)?
{ after(grammarAccess.getRecordTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group_3__0__Impl
	rule__RecordType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3_0()); }
(rule__RecordType__FieldsAssignment_3_0)
{ after(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getGroup_3_1()); }
(rule__RecordType__Group_3_1__0)*
{ after(grammarAccess.getRecordTypeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordType__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group_3_1__0__Impl
	rule__RecordType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getRecordTypeAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3_1_1()); }
(rule__RecordType__FieldsAssignment_3_1_1)
{ after(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getFieldAction_0()); }
(

)
{ after(grammarAccess.getFieldAccess().getFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
(rule__Field__NameAssignment_1)
{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getFieldAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
(rule__Field__TypeAssignment_3)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnionType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__0__Impl
	rule__UnionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getUnionTypeAction_0()); }
(

)
{ after(grammarAccess.getUnionTypeAccess().getUnionTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__1__Impl
	rule__UnionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getUnionKeyword_1()); }

	Union 

{ after(grammarAccess.getUnionTypeAccess().getUnionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__2__Impl
	rule__UnionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__3__Impl
	rule__UnionType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getGroup_3()); }
(rule__UnionType__Group_3__0)?
{ after(grammarAccess.getUnionTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnionType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group_3__0__Impl
	rule__UnionType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getFieldsAssignment_3_0()); }
(rule__UnionType__FieldsAssignment_3_0)
{ after(grammarAccess.getUnionTypeAccess().getFieldsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getGroup_3_1()); }
(rule__UnionType__Group_3_1__0)*
{ after(grammarAccess.getUnionTypeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionType__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group_3_1__0__Impl
	rule__UnionType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getUnionTypeAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionType__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getFieldsAssignment_3_1_1()); }
(rule__UnionType__FieldsAssignment_3_1_1)
{ after(grammarAccess.getUnionTypeAccess().getFieldsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__0__Impl
	rule__TupleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getTupleTypeAction_0()); }
(

)
{ after(grammarAccess.getTupleTypeAccess().getTupleTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__1__Impl
	rule__TupleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getTupleKeyword_1()); }

	Tuple 

{ after(grammarAccess.getTupleTypeAccess().getTupleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__2__Impl
	rule__TupleType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getTupleTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__3__Impl
	rule__TupleType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getGroup_3()); }
(rule__TupleType__Group_3__0)?
{ after(grammarAccess.getTupleTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getTupleTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TupleType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group_3__0__Impl
	rule__TupleType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldsAssignment_3_0()); }
(rule__TupleType__FieldsAssignment_3_0)
{ after(grammarAccess.getTupleTypeAccess().getFieldsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getGroup_3_1()); }
(rule__TupleType__Group_3_1__0)*
{ after(grammarAccess.getTupleTypeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleType__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group_3_1__0__Impl
	rule__TupleType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getTupleTypeAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleType__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldsAssignment_3_1_1()); }
(rule__TupleType__FieldsAssignment_3_1_1)
{ after(grammarAccess.getTupleTypeAccess().getFieldsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__0__Impl
	rule__ListType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getListKeyword_0()); }

	List 

{ after(grammarAccess.getListTypeAccess().getListKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__1__Impl
	rule__ListType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getOfKeyword_1()); }

	Of 

{ after(grammarAccess.getListTypeAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getTypeAssignment_2()); }
(rule__ListType__TypeAssignment_2)
{ after(grammarAccess.getListTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__0__Impl
	rule__SetType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getSetKeyword_0()); }

	Set 

{ after(grammarAccess.getSetTypeAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__1__Impl
	rule__SetType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getOfKeyword_1()); }

	Of 

{ after(grammarAccess.getSetTypeAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
(rule__SetType__TypeAssignment_2)
{ after(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BagType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__0__Impl
	rule__BagType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getBagKeyword_0()); }

	Bag 

{ after(grammarAccess.getBagTypeAccess().getBagKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__1__Impl
	rule__BagType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getOfKeyword_1()); }

	Of 

{ after(grammarAccess.getBagTypeAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getTypeAssignment_2()); }
(rule__BagType__TypeAssignment_2)
{ after(grammarAccess.getBagTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MapType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__0__Impl
	rule__MapType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }

	Map 

{ after(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__1__Impl
	rule__MapType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getDomainAssignment_1()); }
(rule__MapType__DomainAssignment_1)
{ after(grammarAccess.getMapTypeAccess().getDomainAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__2__Impl
	rule__MapType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	HyphenMinusGreaterThanSign 

{ after(grammarAccess.getMapTypeAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getImageAssignment_3()); }
(rule__MapType__ImageAssignment_3)
{ after(grammarAccess.getMapTypeAccess().getImageAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__0__Impl
	rule__EnumType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getEnumTypeAction_0()); }
(

)
{ after(grammarAccess.getEnumTypeAccess().getEnumTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__1__Impl
	rule__EnumType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getEnumKeyword_1()); }

	Enum 

{ after(grammarAccess.getEnumTypeAccess().getEnumKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__2__Impl
	rule__EnumType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__3__Impl
	rule__EnumType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getGroup_3()); }
(rule__EnumType__Group_3__0)?
{ after(grammarAccess.getEnumTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_3__0__Impl
	rule__EnumType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3_0()); }
(rule__EnumType__LiteralsAssignment_3_0)
{ after(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getGroup_3_1()); }
(rule__EnumType__Group_3_1__0)*
{ after(grammarAccess.getEnumTypeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumType__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_3_1__0__Impl
	rule__EnumType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getEnumTypeAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3_1_1()); }
(rule__EnumType__LiteralsAssignment_3_1_1)
{ after(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__0__Impl
	rule__BlockExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockExpressionAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__1__Impl
	rule__BlockExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__2__Impl
	rule__BlockExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
(rule__BlockExpression__Group_2__0)*
{ after(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__3__Impl
	rule__BlockExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getResultAssignment_3()); }
(rule__BlockExpression__ResultAssignment_3)
{ after(grammarAccess.getBlockExpressionAccess().getResultAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BlockExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__0__Impl
	rule__BlockExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getDeclsAssignment_2_0()); }
(rule__BlockExpression__DeclsAssignment_2_0)
{ after(grammarAccess.getBlockExpressionAccess().getDeclsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }

	Semicolon 

{ after(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
(rule__OrExpression__Group_1_0__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
(rule__OrExpression__RightAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
(rule__OrExpression__Group_1_0_0__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OrExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0_0__0__Impl
	rule__OrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__OrExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
(rule__AndExpression__Group_1_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
(rule__AndExpression__RightAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
(rule__AndExpression__Group_1_0_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AndExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__AndExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
(rule__EqualityExpression__Group_1_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_1()); }
(rule__EqualityExpression__RightAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
(rule__EqualityExpression__Group_1_0_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EqualityExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0_0__0__Impl
	rule__EqualityExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__EqualityExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
(rule__RelationalExpression__Group_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
(rule__RelationalExpression__RightAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
(rule__RelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
(rule__AdditiveExpression__RightAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
(rule__AdditiveExpression__Group_1_0_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AdditiveExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__0__Impl
	rule__AdditiveExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__AdditiveExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__MultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
(rule__MultiplicativeExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
(rule__MultiplicativeExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplicativeExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__MultiplicativeExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__0__Impl
	rule__UnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__1__Impl
	rule__UnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
(rule__UnaryOperation__OperatorAssignment_0_1)
{ after(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
(rule__UnaryOperation__OperandAssignment_0_2)
{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group__0__Impl
	rule__UnitExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getPropertyExpressionParserRuleCall_0()); }
	rulePropertyExpression
{ after(grammarAccess.getUnitExpressionAccess().getPropertyExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
(rule__UnitExpression__Group_1__0)?
{ after(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__0__Impl
	rule__UnitExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getUnitExpressionExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnitExpressionAccess().getUnitExpressionExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__1__Impl
	rule__UnitExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getAlternatives_1_1()); }
(rule__UnitExpression__Alternatives_1_1)?
{ after(grammarAccess.getUnitExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getUnitAssignment_1_2()); }
(rule__UnitExpression__UnitAssignment_1_2)
{ after(grammarAccess.getUnitExpressionAccess().getUnitAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group__0__Impl
	rule__PropertyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getSelectExpressionParserRuleCall_0()); }
	ruleSelectExpression
{ after(grammarAccess.getPropertyExpressionAccess().getSelectExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getGroup_1()); }
(rule__PropertyExpression__Group_1__0)?
{ after(grammarAccess.getPropertyExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group_1__0__Impl
	rule__PropertyExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getGroup_1_0()); }
(rule__PropertyExpression__Group_1_0__0)
{ after(grammarAccess.getPropertyExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyAssignment_1_1()); }
(rule__PropertyExpression__PropertyAssignment_1_1)
{ after(grammarAccess.getPropertyExpressionAccess().getPropertyAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getGroup_1_0_0()); }
(rule__PropertyExpression__Group_1_0_0__0)
{ after(grammarAccess.getPropertyExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PropertyExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group_1_0_0__0__Impl
	rule__PropertyExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyExpressionModelElementAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getPropertyExpressionAccess().getPropertyExpressionModelElementAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getNumberSignKeyword_1_0_0_1()); }

	NumberSign 

{ after(grammarAccess.getPropertyExpressionAccess().getNumberSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group__0__Impl
	rule__SelectExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getSelectExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup_1()); }
(rule__SelectExpression__Group_1__0)*
{ after(grammarAccess.getSelectExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup_1_0()); }
(rule__SelectExpression__Group_1_0__0)
{ after(grammarAccess.getSelectExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SelectExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0__0__Impl
	rule__SelectExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getSelectionReceiverAction_1_0_0()); }
(

)
{ after(grammarAccess.getSelectExpressionAccess().getSelectionReceiverAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0__1__Impl
	rule__SelectExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getFullStopKeyword_1_0_1()); }

	FullStop 

{ after(grammarAccess.getSelectExpressionAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0__2__Impl
	rule__SelectExpression__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getRefAssignment_1_0_2()); }
(rule__SelectExpression__RefAssignment_1_0_2)
{ after(grammarAccess.getSelectExpressionAccess().getRefAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3()); }
(rule__SelectExpression__Group_1_0_3__0)?
{ after(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectExpression__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3__0__Impl
	rule__SelectExpression__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getLeftParenthesisKeyword_1_0_3_0()); }

	LeftParenthesis 

{ after(grammarAccess.getSelectExpressionAccess().getLeftParenthesisKeyword_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3__1__Impl
	rule__SelectExpression__Group_1_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3_1()); }
(rule__SelectExpression__Group_1_0_3_1__0)?
{ after(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getRightParenthesisKeyword_1_0_3_2()); }

	RightParenthesis 

{ after(grammarAccess.getSelectExpressionAccess().getRightParenthesisKeyword_1_0_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectExpression__Group_1_0_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3_1__0__Impl
	rule__SelectExpression__Group_1_0_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getArgsAssignment_1_0_3_1_0()); }
(rule__SelectExpression__ArgsAssignment_1_0_3_1_0)
{ after(grammarAccess.getSelectExpressionAccess().getArgsAssignment_1_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3_1_1()); }
(rule__SelectExpression__Group_1_0_3_1_1__0)*
{ after(grammarAccess.getSelectExpressionAccess().getGroup_1_0_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectExpression__Group_1_0_3_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3_1_1__0__Impl
	rule__SelectExpression__Group_1_0_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getCommaKeyword_1_0_3_1_1_0()); }

	Comma 

{ after(grammarAccess.getSelectExpressionAccess().getCommaKeyword_1_0_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1_0_3_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectExpression__Group_1_0_3_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1_0_3_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getArgsAssignment_1_0_3_1_1_1()); }
(rule__SelectExpression__ArgsAssignment_1_0_3_1_1_1)
{ after(grammarAccess.getSelectExpressionAccess().getArgsAssignment_1_0_3_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_4__0__Impl
	rule__PrimaryExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }

	LeftParenthesis 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_4__1__Impl
	rule__PrimaryExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1()); }
	ruleExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }

	RightParenthesis 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamedElementRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group__0__Impl
	rule__NamedElementRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getCoreAssignment_0()); }
(rule__NamedElementRef__CoreAssignment_0)?
{ after(grammarAccess.getNamedElementRefAccess().getCoreAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group__1__Impl
	rule__NamedElementRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getRefAssignment_1()); }
(rule__NamedElementRef__RefAssignment_1)
{ after(grammarAccess.getNamedElementRefAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getGroup_2()); }
(rule__NamedElementRef__Group_2__0)?
{ after(grammarAccess.getNamedElementRefAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamedElementRef__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2__0__Impl
	rule__NamedElementRef__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getLeftParenthesisKeyword_2_0()); }

	LeftParenthesis 

{ after(grammarAccess.getNamedElementRefAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2__1__Impl
	rule__NamedElementRef__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getGroup_2_1()); }
(rule__NamedElementRef__Group_2_1__0)?
{ after(grammarAccess.getNamedElementRefAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getRightParenthesisKeyword_2_2()); }

	RightParenthesis 

{ after(grammarAccess.getNamedElementRefAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamedElementRef__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2_1__0__Impl
	rule__NamedElementRef__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getArgsAssignment_2_1_0()); }
(rule__NamedElementRef__ArgsAssignment_2_1_0)
{ after(grammarAccess.getNamedElementRefAccess().getArgsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getGroup_2_1_1()); }
(rule__NamedElementRef__Group_2_1_1__0)*
{ after(grammarAccess.getNamedElementRefAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedElementRef__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2_1_1__0__Impl
	rule__NamedElementRef__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getCommaKeyword_2_1_1_0()); }

	Comma 

{ after(grammarAccess.getNamedElementRefAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementRef__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementRef__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getArgsAssignment_2_1_1_1()); }
(rule__NamedElementRef__ArgsAssignment_2_1_1_1)
{ after(grammarAccess.getNamedElementRefAccess().getArgsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRangeAction_0()); }
(

)
{ after(grammarAccess.getRangeExpressionAccess().getRangeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__1__Impl
	rule__RangeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getLeftSquareBracketKeyword_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getRangeExpressionAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__2__Impl
	rule__RangeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getMinimumAssignment_2()); }
(rule__RangeExpression__MinimumAssignment_2)
{ after(grammarAccess.getRangeExpressionAccess().getMinimumAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__3__Impl
	rule__RangeExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getFullStopFullStopKeyword_3()); }

	FullStopFullStop 

{ after(grammarAccess.getRangeExpressionAccess().getFullStopFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__4__Impl
	rule__RangeExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getMaximumAssignment_4()); }
(rule__RangeExpression__MaximumAssignment_4)
{ after(grammarAccess.getRangeExpressionAccess().getMaximumAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__5__Impl
	rule__RangeExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_5()); }
(rule__RangeExpression__Group_5__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRightSquareBracketKeyword_6()); }

	RightSquareBracket 

{ after(grammarAccess.getRangeExpressionAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__RangeExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_5__0__Impl
	rule__RangeExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getDeltaKeyword_5_0()); }
(
	Delta 
)
{ after(grammarAccess.getRangeExpressionAccess().getDeltaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getDeltaAssignment_5_1()); }
(rule__RangeExpression__DeltaAssignment_5_1)
{ after(grammarAccess.getRangeExpressionAccess().getDeltaAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getConditionalAction_0()); }
(

)
{ after(grammarAccess.getIfExpressionAccess().getConditionalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }

	If 

{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfAssignment_2()); }
(rule__IfExpression__IfAssignment_2)
{ after(grammarAccess.getIfExpressionAccess().getIfAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }

	Then 

{ after(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_4()); }
(rule__IfExpression__ThenAssignment_4)
{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__5__Impl
	rule__IfExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup_5()); }
(rule__IfExpression__Group_5__0)?
{ after(grammarAccess.getIfExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getEndifKeyword_6()); }

	Endif 

{ after(grammarAccess.getIfExpressionAccess().getEndifKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5__0__Impl
	rule__IfExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_5_0()); }

	Else 

{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseAssignment_5_1()); }
(rule__IfExpression__ElseAssignment_5_1)
{ after(grammarAccess.getIfExpressionAccess().getElseAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WrappedNamedElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrappedNamedElement__Group__0__Impl
	rule__WrappedNamedElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedNamedElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrappedNamedElementAccess().getWrappedNamedElementAction_0()); }
(

)
{ after(grammarAccess.getWrappedNamedElementAccess().getWrappedNamedElementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrappedNamedElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrappedNamedElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedNamedElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrappedNamedElementAccess().getElemAssignment_1()); }
(rule__WrappedNamedElement__ElemAssignment_1)
{ after(grammarAccess.getWrappedNamedElementAccess().getElemAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EBooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EBooleanLiteral__Group__0__Impl
	rule__EBooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EBooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanLiteralAccess().getEBooleanLiteralAction_0()); }
(

)
{ after(grammarAccess.getEBooleanLiteralAccess().getEBooleanLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EBooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EBooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EBooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanLiteralAccess().getAlternatives_1()); }
(rule__EBooleanLiteral__Alternatives_1)
{ after(grammarAccess.getEBooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EIntegerLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EIntegerLiteral__Group__0__Impl
	rule__EIntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerLiteralAccess().getEIntegerLiteralAction_0()); }
(

)
{ after(grammarAccess.getEIntegerLiteralAccess().getEIntegerLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EIntegerLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EIntegerLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerLiteralAccess().getValueAssignment_1()); }
(rule__EIntegerLiteral__ValueAssignment_1)
{ after(grammarAccess.getEIntegerLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ERealLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ERealLiteral__Group__0__Impl
	rule__ERealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ERealLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getERealLiteralAccess().getERealLiteralAction_0()); }
(

)
{ after(grammarAccess.getERealLiteralAccess().getERealLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ERealLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ERealLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ERealLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getERealLiteralAccess().getValueAssignment_1()); }
(rule__ERealLiteral__ValueAssignment_1)
{ after(grammarAccess.getERealLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EStringLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EStringLiteral__Group__0__Impl
	rule__EStringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EStringLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringLiteralAccess().getEStringLiteralAction_0()); }
(

)
{ after(grammarAccess.getEStringLiteralAccess().getEStringLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EStringLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EStringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EStringLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringLiteralAccess().getValueAssignment_1()); }
(rule__EStringLiteral__ValueAssignment_1)
{ after(grammarAccess.getEStringLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getLeftParenthesisKeyword_0()); }

	LeftParenthesis 

{ after(grammarAccess.getExpressionListAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
	rule__ExpressionList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)?
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getRightParenthesisKeyword_2()); }

	RightParenthesis 

{ after(grammarAccess.getExpressionListAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getElementsAssignment_1_0()); }
(rule__ExpressionList__ElementsAssignment_1_0)
{ after(grammarAccess.getExpressionListAccess().getElementsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1_1()); }
(rule__ExpressionList__Group_1_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1_1__0__Impl
	rule__ExpressionList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getElementsAssignment_1_1_1()); }
(rule__ExpressionList__ElementsAssignment_1_1_1)
{ after(grammarAccess.getExpressionListAccess().getElementsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__0__Impl
	rule__ListLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
(

)
{ after(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__1__Impl
	rule__ListLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getListKeyword_1()); }

	List 

{ after(grammarAccess.getListLiteralAccess().getListKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getExpressionListParserRuleCall_2()); }
	ruleExpressionList
{ after(grammarAccess.getListLiteralAccess().getExpressionListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetLiteral__Group__0__Impl
	rule__SetLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getSetLiteralAction_0()); }
(

)
{ after(grammarAccess.getSetLiteralAccess().getSetLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetLiteral__Group__1__Impl
	rule__SetLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getSetKeyword_1()); }

	Set 

{ after(grammarAccess.getSetLiteralAccess().getSetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getExpressionListParserRuleCall_2()); }
	ruleExpressionList
{ after(grammarAccess.getSetLiteralAccess().getExpressionListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RecordLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group__0__Impl
	rule__RecordLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getRecordLiteralAction_0()); }
(

)
{ after(grammarAccess.getRecordLiteralAccess().getRecordLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group__1__Impl
	rule__RecordLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getRecordKeyword_1()); }

	Record 

{ after(grammarAccess.getRecordLiteralAccess().getRecordKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group__2__Impl
	rule__RecordLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getRecordLiteralAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group__3__Impl
	rule__RecordLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getGroup_3()); }
(rule__RecordLiteral__Group_3__0)?
{ after(grammarAccess.getRecordLiteralAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getRecordLiteralAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordLiteral__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group_3__0__Impl
	rule__RecordLiteral__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getFieldValuesAssignment_3_0()); }
(rule__RecordLiteral__FieldValuesAssignment_3_0)
{ after(grammarAccess.getRecordLiteralAccess().getFieldValuesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getGroup_3_1()); }
(rule__RecordLiteral__Group_3_1__0)*
{ after(grammarAccess.getRecordLiteralAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordLiteral__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group_3_1__0__Impl
	rule__RecordLiteral__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getRecordLiteralAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteral__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteral__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getFieldValuesAssignment_3_1_1()); }
(rule__RecordLiteral__FieldValuesAssignment_3_1_1)
{ after(grammarAccess.getRecordLiteralAccess().getFieldValuesAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group__0__Impl
	rule__FieldValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getNameAssignment_0()); }
(rule__FieldValue__NameAssignment_0)
{ after(grammarAccess.getFieldValueAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group__1__Impl
	rule__FieldValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getFieldValueAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getValueAssignment_2()); }
(rule__FieldValue__ValueAssignment_2)
{ after(grammarAccess.getFieldValueAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnionLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionLiteral__Group__0__Impl
	rule__UnionLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getUnionLiteralAction_0()); }
(

)
{ after(grammarAccess.getUnionLiteralAccess().getUnionLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionLiteral__Group__1__Impl
	rule__UnionLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getUnionKeyword_1()); }

	Union 

{ after(grammarAccess.getUnionLiteralAccess().getUnionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionLiteral__Group__2__Impl
	rule__UnionLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getUnionLiteralAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionLiteral__Group__3__Impl
	rule__UnionLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getFieldValueAssignment_3()); }
(rule__UnionLiteral__FieldValueAssignment_3)
{ after(grammarAccess.getUnionLiteralAccess().getFieldValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getUnionLiteralAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TupleLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__0__Impl
	rule__TupleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_0()); }
(

)
{ after(grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__1__Impl
	rule__TupleLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getTupleKeyword_1()); }

	Tuple 

{ after(grammarAccess.getTupleLiteralAccess().getTupleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getExpressionListParserRuleCall_2()); }
	ruleExpressionList
{ after(grammarAccess.getTupleLiteralAccess().getExpressionListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BagLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagLiteral__Group__0__Impl
	rule__BagLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BagLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagLiteralAccess().getBagLiteralAction_0()); }
(

)
{ after(grammarAccess.getBagLiteralAccess().getBagLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagLiteral__Group__1__Impl
	rule__BagLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BagLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagLiteralAccess().getBagKeyword_1()); }

	Bag 

{ after(grammarAccess.getBagLiteralAccess().getBagKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BagLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BagLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BagLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagLiteralAccess().getExpressionListParserRuleCall_2()); }
	ruleExpressionList
{ after(grammarAccess.getBagLiteralAccess().getExpressionListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MapLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapLiteral__Group__0__Impl
	rule__MapLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); }
(

)
{ after(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapLiteralAccess().getMapKeyword_1()); }

	Map 

{ after(grammarAccess.getMapLiteralAccess().getMapKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QCREF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__0__Impl
	rule__QCREF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getGroup_0()); }
(rule__QCREF__Group_0__0)*
{ after(grammarAccess.getQCREFAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__1__Impl
	rule__QCREF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getGroup_2()); }
(rule__QCREF__Group_2__0)?
{ after(grammarAccess.getQCREFAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QCREF__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_0__0__Impl
	rule__QCREF__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); }

	ColonColon 

{ after(grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QCREF__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_2__0__Impl
	rule__QCREF__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getColonKeyword_2_0()); }

	Colon 

{ after(grammarAccess.getQCREFAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QCREF__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QCREF__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QCREF__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainedPropertyAssociation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__0__Impl
	rule__ContainedPropertyAssociation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getPropertyAssignment_0()); }
(rule__ContainedPropertyAssociation__PropertyAssignment_0)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__1__Impl
	rule__ContainedPropertyAssociation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAlternatives_1()); }
(rule__ContainedPropertyAssociation__Alternatives_1)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__2__Impl
	rule__ContainedPropertyAssociation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getConstantAssignment_2()); }
(rule__ContainedPropertyAssociation__ConstantAssignment_2)?
{ after(grammarAccess.getContainedPropertyAssociationAccess().getConstantAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__3__Impl
	rule__ContainedPropertyAssociation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup_3()); }
(rule__ContainedPropertyAssociation__Group_3__0)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__4__Impl
	rule__ContainedPropertyAssociation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup_4()); }
(rule__ContainedPropertyAssociation__Group_4__0)?
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__5__Impl
	rule__ContainedPropertyAssociation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup_5()); }
(rule__ContainedPropertyAssociation__Group_5__0)?
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ContainedPropertyAssociation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_3__0__Impl
	rule__ContainedPropertyAssociation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueAssignment_3_0()); }
(rule__ContainedPropertyAssociation__OwnedValueAssignment_3_0)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup_3_1()); }
(rule__ContainedPropertyAssociation__Group_3_1__0)*
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainedPropertyAssociation__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_3_1__0__Impl
	rule__ContainedPropertyAssociation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueAssignment_3_1_1()); }
(rule__ContainedPropertyAssociation__OwnedValueAssignment_3_1_1)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainedPropertyAssociation__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_4__0__Impl
	rule__ContainedPropertyAssociation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToKeywordsParserRuleCall_4_0()); }
	ruleAppliesToKeywords
{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToKeywordsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_4__1__Impl
	rule__ContainedPropertyAssociation__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToAssignment_4_1()); }
(rule__ContainedPropertyAssociation__AppliesToAssignment_4_1)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getGroup_4_2()); }
(rule__ContainedPropertyAssociation__Group_4_2__0)*
{ after(grammarAccess.getContainedPropertyAssociationAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContainedPropertyAssociation__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_4_2__0__Impl
	rule__ContainedPropertyAssociation__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_2_0()); }

	Comma 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToAssignment_4_2_1()); }
(rule__ContainedPropertyAssociation__AppliesToAssignment_4_2_1)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainedPropertyAssociation__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_5__0__Impl
	rule__ContainedPropertyAssociation__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getInBindingKeywordsParserRuleCall_5_0()); }
	ruleInBindingKeywords
{ after(grammarAccess.getContainedPropertyAssociationAccess().getInBindingKeywordsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_5__1__Impl
	rule__ContainedPropertyAssociation__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_1()); }

	LeftParenthesis 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_5__2__Impl
	rule__ContainedPropertyAssociation__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getInBindingAssignment_5_2()); }
(rule__ContainedPropertyAssociation__InBindingAssignment_5_2)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getInBindingAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainedPropertyAssociation__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainedPropertyAssociation__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_3()); }

	RightParenthesis 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PropertyAssociation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__0__Impl
	rule__PropertyAssociation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getPropertyAssignment_0()); }
(rule__PropertyAssociation__PropertyAssignment_0)
{ after(grammarAccess.getPropertyAssociationAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__1__Impl
	rule__PropertyAssociation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getAlternatives_1()); }
(rule__PropertyAssociation__Alternatives_1)
{ after(grammarAccess.getPropertyAssociationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__2__Impl
	rule__PropertyAssociation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getConstantAssignment_2()); }
(rule__PropertyAssociation__ConstantAssignment_2)?
{ after(grammarAccess.getPropertyAssociationAccess().getConstantAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__3__Impl
	rule__PropertyAssociation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getGroup_3()); }
(rule__PropertyAssociation__Group_3__0)
{ after(grammarAccess.getPropertyAssociationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__4__Impl
	rule__PropertyAssociation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getGroup_4()); }
(rule__PropertyAssociation__Group_4__0)?
{ after(grammarAccess.getPropertyAssociationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getPropertyAssociationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PropertyAssociation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_3__0__Impl
	rule__PropertyAssociation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getOwnedValueAssignment_3_0()); }
(rule__PropertyAssociation__OwnedValueAssignment_3_0)
{ after(grammarAccess.getPropertyAssociationAccess().getOwnedValueAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getGroup_3_1()); }
(rule__PropertyAssociation__Group_3_1__0)*
{ after(grammarAccess.getPropertyAssociationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyAssociation__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_3_1__0__Impl
	rule__PropertyAssociation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getPropertyAssociationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getOwnedValueAssignment_3_1_1()); }
(rule__PropertyAssociation__OwnedValueAssignment_3_1_1)
{ after(grammarAccess.getPropertyAssociationAccess().getOwnedValueAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyAssociation__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_4__0__Impl
	rule__PropertyAssociation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getInBindingKeywordsParserRuleCall_4_0()); }
	ruleInBindingKeywords
{ after(grammarAccess.getPropertyAssociationAccess().getInBindingKeywordsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_4__1__Impl
	rule__PropertyAssociation__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getLeftParenthesisKeyword_4_1()); }

	LeftParenthesis 

{ after(grammarAccess.getPropertyAssociationAccess().getLeftParenthesisKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_4__2__Impl
	rule__PropertyAssociation__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getInBindingAssignment_4_2()); }
(rule__PropertyAssociation__InBindingAssignment_4_2)
{ after(grammarAccess.getPropertyAssociationAccess().getInBindingAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyAssociation__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyAssociation__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getRightParenthesisKeyword_4_3()); }

	RightParenthesis 

{ after(grammarAccess.getPropertyAssociationAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__OptionalModalPropertyValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group__0__Impl
	rule__OptionalModalPropertyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValueAssignment_0()); }
(rule__OptionalModalPropertyValue__OwnedValueAssignment_0)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getGroup_1()); }
(rule__OptionalModalPropertyValue__Group_1__0)?
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OptionalModalPropertyValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1__0__Impl
	rule__OptionalModalPropertyValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModesKeywordsParserRuleCall_1_0()); }
	ruleInModesKeywords
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModesKeywordsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1__1__Impl
	rule__OptionalModalPropertyValue__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_1()); }

	LeftParenthesis 

{ after(grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1__2__Impl
	rule__OptionalModalPropertyValue__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeAssignment_1_2()); }
(rule__OptionalModalPropertyValue__InModeAssignment_1_2)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1__3__Impl
	rule__OptionalModalPropertyValue__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getGroup_1_3()); }
(rule__OptionalModalPropertyValue__Group_1_3__0)*
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_4()); }

	RightParenthesis 

{ after(grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OptionalModalPropertyValue__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1_3__0__Impl
	rule__OptionalModalPropertyValue__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_3_0()); }

	Comma 

{ after(grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalModalPropertyValue__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalModalPropertyValue__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeAssignment_1_3_1()); }
(rule__OptionalModalPropertyValue__InModeAssignment_1_3_1)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__FieldPropertyAssociation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldPropertyAssociation__Group__0__Impl
	rule__FieldPropertyAssociation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldPropertyAssociation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getPropertyAssignment_0()); }
(rule__FieldPropertyAssociation__PropertyAssignment_0)
{ after(grammarAccess.getFieldPropertyAssociationAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldPropertyAssociation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldPropertyAssociation__Group__1__Impl
	rule__FieldPropertyAssociation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldPropertyAssociation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldPropertyAssociation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldPropertyAssociation__Group__2__Impl
	rule__FieldPropertyAssociation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldPropertyAssociation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValueAssignment_2()); }
(rule__FieldPropertyAssociation__OwnedValueAssignment_2)
{ after(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldPropertyAssociation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldPropertyAssociation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldPropertyAssociation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContainmentPathElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group__0__Impl
	rule__ContainmentPathElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getGroup_0()); }
(rule__ContainmentPathElement__Group_0__0)
{ after(grammarAccess.getContainmentPathElementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainmentPathElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getGroup_1()); }
(rule__ContainmentPathElement__Group_1__0)?
{ after(grammarAccess.getContainmentPathElementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainmentPathElement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group_0__0__Impl
	rule__ContainmentPathElement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getNamedElementAssignment_0_0()); }
(rule__ContainmentPathElement__NamedElementAssignment_0_0)
{ after(grammarAccess.getContainmentPathElementAccess().getNamedElementAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainmentPathElement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getArrayRangeAssignment_0_1()); }
(rule__ContainmentPathElement__ArrayRangeAssignment_0_1)*
{ after(grammarAccess.getContainmentPathElementAccess().getArrayRangeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainmentPathElement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group_1__0__Impl
	rule__ContainmentPathElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0()); }

	FullStop 

{ after(grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainmentPathElement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainmentPathElement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getPathAssignment_1_1()); }
(rule__ContainmentPathElement__PathAssignment_1_1)
{ after(grammarAccess.getContainmentPathElementAccess().getPathAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ArrayRange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group__0__Impl
	rule__ArrayRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getArrayRangeAction_0()); }
(

)
{ after(grammarAccess.getArrayRangeAccess().getArrayRangeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group__1__Impl
	rule__ArrayRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group__2__Impl
	rule__ArrayRange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getLowerBoundAssignment_2()); }
(rule__ArrayRange__LowerBoundAssignment_2)
{ after(grammarAccess.getArrayRangeAccess().getLowerBoundAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group__3__Impl
	rule__ArrayRange__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getGroup_3()); }
(rule__ArrayRange__Group_3__0)?
{ after(grammarAccess.getArrayRangeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4()); }

	RightSquareBracket 

{ after(grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayRange__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group_3__0__Impl
	rule__ArrayRange__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0()); }

	FullStopFullStop 

{ after(grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayRange__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getUpperBoundAssignment_3_1()); }
(rule__ArrayRange__UpperBoundAssignment_3_1)
{ after(grammarAccess.getArrayRangeAccess().getUpperBoundAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedConstant__Group__0__Impl
	rule__SignedConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedConstant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedConstantAccess().getOpAssignment_0()); }
(rule__SignedConstant__OpAssignment_0)
{ after(grammarAccess.getSignedConstantAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedConstant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedConstant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionAssignment_1()); }
(rule__SignedConstant__OwnedPropertyExpressionAssignment_1)
{ after(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTerm__Group__0__Impl
	rule__IntegerTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTermAccess().getValueAssignment_0()); }
(rule__IntegerTerm__ValueAssignment_0)
{ after(grammarAccess.getIntegerTermAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTermAccess().getUnitAssignment_1()); }
(rule__IntegerTerm__UnitAssignment_1)?
{ after(grammarAccess.getIntegerTermAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getAlternatives_0()); }
(rule__SignedInt__Alternatives_0)?
{ after(grammarAccess.getSignedIntAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getINTEGER_LITTerminalRuleCall_1()); }
	RULE_INTEGER_LIT
{ after(grammarAccess.getSignedIntAccess().getINTEGER_LITTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTerm__Group__0__Impl
	rule__RealTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTermAccess().getValueAssignment_0()); }
(rule__RealTerm__ValueAssignment_0)
{ after(grammarAccess.getRealTermAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTermAccess().getUnitAssignment_1()); }
(rule__RealTerm__UnitAssignment_1)?
{ after(grammarAccess.getRealTermAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AppliesToKeywords__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliesToKeywords__Group__0__Impl
	rule__AppliesToKeywords__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliesToKeywords__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliesToKeywordsAccess().getAppliesKeyword_0()); }

	Applies 

{ after(grammarAccess.getAppliesToKeywordsAccess().getAppliesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AppliesToKeywords__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AppliesToKeywords__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppliesToKeywords__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppliesToKeywordsAccess().getToKeyword_1()); }

	To 

{ after(grammarAccess.getAppliesToKeywordsAccess().getToKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InBindingKeywords__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InBindingKeywords__Group__0__Impl
	rule__InBindingKeywords__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InBindingKeywords__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInBindingKeywordsAccess().getInKeyword_0()); }

	In 

{ after(grammarAccess.getInBindingKeywordsAccess().getInKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InBindingKeywords__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InBindingKeywords__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InBindingKeywords__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInBindingKeywordsAccess().getBindingKeyword_1()); }

	Binding 

{ after(grammarAccess.getInBindingKeywordsAccess().getBindingKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InModesKeywords__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InModesKeywords__Group__0__Impl
	rule__InModesKeywords__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InModesKeywords__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInModesKeywordsAccess().getInKeyword_0()); }

	In 

{ after(grammarAccess.getInModesKeywordsAccess().getInKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InModesKeywords__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InModesKeywords__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InModesKeywords__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInModesKeywordsAccess().getModesKeyword_1()); }

	Modes 

{ after(grammarAccess.getInModesKeywordsAccess().getModesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__QPREF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QPREF__Group__0__Impl
	rule__QPREF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QPREF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QPREF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QPREF__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QPREF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQPREFAccess().getGroup_1()); }
(rule__QPREF__Group_1__0)?
{ after(grammarAccess.getQPREFAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QPREF__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QPREF__Group_1__0__Impl
	rule__QPREF__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QPREF__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); }

	ColonColon 

{ after(grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QPREF__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QPREF__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QPREF__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ExprModel__AnnexAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexExprLibraryParserRuleCall_0_1_0()); }
	ruleExprLibrary{ after(grammarAccess.getExprModelAccess().getAnnexExprLibraryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprModel__AnnexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprModelAccess().getAnnexExprSubclauseParserRuleCall_1_1_0()); }
	ruleExprSubclause{ after(grammarAccess.getExprModelAccess().getAnnexExprSubclauseParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__DeclsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getDeclsEDeclarationParserRuleCall_0_0()); }
	ruleEDeclaration{ after(grammarAccess.getDeclarationsAccess().getDeclsEDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarations__DeclsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationsAccess().getDeclsEDeclarationParserRuleCall_1_1_0()); }
	ruleEDeclaration{ after(grammarAccess.getDeclarationsAccess().getDeclsEDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__OwnedPropertyAssociationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsPropertyAssociationParserRuleCall_4_1_0()); }
	rulePropertyAssociation{ after(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsPropertyAssociationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__OwnedPropertyAssociationsAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsPropertyAssociationParserRuleCall_4_2_1_0()); }
	rulePropertyAssociation{ after(grammarAccess.getTypeDeclAccess().getOwnedPropertyAssociationsPropertyAssociationParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__ConstAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
(
{ before(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }

	Val 

{ after(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
)

{ after(grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__DeclTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getDeclTypeTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getVarDeclAccess().getDeclTypeTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getValueExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVarDeclAccess().getValueExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__ResultTypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getResultTypeTypeParserRuleCall_6_0()); }
	ruleType{ after(grammarAccess.getFunDeclAccess().getResultTypeTypeParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__JavaAssignment_7_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getJavaJavaKeyword_7_1_0_0_0()); }
(
{ before(grammarAccess.getFunDeclAccess().getJavaJavaKeyword_7_1_0_0_0()); }

	Java 

{ after(grammarAccess.getFunDeclAccess().getJavaJavaKeyword_7_1_0_0_0()); }
)

{ after(grammarAccess.getFunDeclAccess().getJavaJavaKeyword_7_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__FqnAssignment_7_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getFqnJavaFQNParserRuleCall_7_1_0_2_0()); }
	ruleJavaFQN{ after(grammarAccess.getFunDeclAccess().getFqnJavaFQNParserRuleCall_7_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDecl__ExpAssignment_7_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclAccess().getExpExpressionParserRuleCall_7_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunDeclAccess().getExpExpressionParserRuleCall_7_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Args__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getArgsArgumentParserRuleCall_0_0()); }
	ruleArgument{ after(grammarAccess.getArgsAccess().getArgsArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Args__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgsAccess().getArgsArgumentParserRuleCall_1_1_0()); }
	ruleArgument{ after(grammarAccess.getArgsAccess().getArgsArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getArgumentAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAssertionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__AssertAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getAssertExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAssertionAccess().getAssertExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getRangeTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__CategoryAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getCategoryComponentCategoryParserRuleCall_0()); }
	ruleComponentCategory{ after(grammarAccess.getCategoryAccess().getCategoryComponentCategoryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaClass__ClassAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaClassAccess().getClassMetaClassEnumEnumRuleCall_0()); }
	ruleMetaClassEnum{ after(grammarAccess.getMetaClassAccess().getClassMetaClassEnumEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__FieldsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_0_0()); }
	ruleField{ after(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__FieldsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_1_1_0()); }
	ruleField{ after(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__FieldsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getFieldsFieldParserRuleCall_3_0_0()); }
	ruleField{ after(grammarAccess.getUnionTypeAccess().getFieldsFieldParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionType__FieldsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionTypeAccess().getFieldsFieldParserRuleCall_3_1_1_0()); }
	ruleField{ after(grammarAccess.getUnionTypeAccess().getFieldsFieldParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__FieldsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldsTupleFieldParserRuleCall_3_0_0()); }
	ruleTupleField{ after(grammarAccess.getTupleTypeAccess().getFieldsTupleFieldParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleType__FieldsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeAccess().getFieldsTupleFieldParserRuleCall_3_1_1_0()); }
	ruleTupleField{ after(grammarAccess.getTupleTypeAccess().getFieldsTupleFieldParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleField__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleFieldAccess().getTypeTypeParserRuleCall_0()); }
	ruleType{ after(grammarAccess.getTupleFieldAccess().getTypeTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BagType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBagTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getBagTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__DomainAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getDomainTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getMapTypeAccess().getDomainTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__ImageAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getImageTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getMapTypeAccess().getImageTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__LiteralsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsEnumLiteralParserRuleCall_3_0_0()); }
	ruleEnumLiteral{ after(grammarAccess.getEnumTypeAccess().getLiteralsEnumLiteralParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__LiteralsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsEnumLiteralParserRuleCall_3_1_1_0()); }
	ruleEnumLiteral{ after(grammarAccess.getEnumTypeAccess().getLiteralsEnumLiteralParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getRefNamedElementCrossReference_0()); }
(
{ before(grammarAccess.getTypeRefAccess().getRefNamedElementQCREFParserRuleCall_0_1()); }
	ruleQCREF{ after(grammarAccess.getTypeRefAccess().getRefNamedElementQCREFParserRuleCall_0_1()); }
)
{ after(grammarAccess.getTypeRefAccess().getRefNamedElementCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__DeclsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getDeclsVarDeclParserRuleCall_2_0_0()); }
	ruleVarDecl{ after(grammarAccess.getBlockExpressionAccess().getDeclsVarDeclParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__ResultAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getResultExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getBlockExpressionAccess().getResultExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorOpOrParserRuleCall_1_0_0_1_0()); }
	ruleOpOr{ after(grammarAccess.getOrExpressionAccess().getOperatorOpOrParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorOpAndParserRuleCall_1_0_0_1_0()); }
	ruleOpAnd{ after(grammarAccess.getAndExpressionAccess().getOperatorOpAndParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorOpEqualityParserRuleCall_1_0_0_1_0()); }
	ruleOpEquality{ after(grammarAccess.getEqualityExpressionAccess().getOperatorOpEqualityParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorOpCompareParserRuleCall_1_0_0_1_0()); }
	ruleOpCompare{ after(grammarAccess.getRelationalExpressionAccess().getOperatorOpCompareParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorOpAddParserRuleCall_1_0_0_1_0()); }
	ruleOpAdd{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorOpAddParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorOpMultiParserRuleCall_1_0_0_1_0()); }
	ruleOpMulti{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorOpMultiParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
	ruleUnaryOperation{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorOpUnaryParserRuleCall_0_1_0()); }
	ruleOpUnary{ after(grammarAccess.getUnaryOperationAccess().getOperatorOpUnaryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandUnitExpressionParserRuleCall_0_2_0()); }
	ruleUnitExpression{ after(grammarAccess.getUnaryOperationAccess().getOperandUnitExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__ConvertAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getConvertPercentSignKeyword_1_1_0_0()); }
(
{ before(grammarAccess.getUnitExpressionAccess().getConvertPercentSignKeyword_1_1_0_0()); }

	PercentSign 

{ after(grammarAccess.getUnitExpressionAccess().getConvertPercentSignKeyword_1_1_0_0()); }
)

{ after(grammarAccess.getUnitExpressionAccess().getConvertPercentSignKeyword_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__DropAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getDropInKeyword_1_1_1_0()); }
(
{ before(grammarAccess.getUnitExpressionAccess().getDropInKeyword_1_1_1_0()); }

	In 

{ after(grammarAccess.getUnitExpressionAccess().getDropInKeyword_1_1_1_0()); }
)

{ after(grammarAccess.getUnitExpressionAccess().getDropInKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__UnitAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getUnitUnitLiteralCrossReference_1_2_0()); }
(
{ before(grammarAccess.getUnitExpressionAccess().getUnitUnitLiteralIDTerminalRuleCall_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getUnitExpressionAccess().getUnitUnitLiteralIDTerminalRuleCall_1_2_0_1()); }
)
{ after(grammarAccess.getUnitExpressionAccess().getUnitUnitLiteralCrossReference_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__PropertyAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyAbstractNamedValueCrossReference_1_1_0()); }
(
{ before(grammarAccess.getPropertyExpressionAccess().getPropertyAbstractNamedValueQPREFParserRuleCall_1_1_0_1()); }
	ruleQPREF{ after(grammarAccess.getPropertyExpressionAccess().getPropertyAbstractNamedValueQPREFParserRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getPropertyExpressionAccess().getPropertyAbstractNamedValueCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__RefAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getRefNamedElementCrossReference_1_0_2_0()); }
(
{ before(grammarAccess.getSelectExpressionAccess().getRefNamedElementQCREFParserRuleCall_1_0_2_0_1()); }
	ruleQCREF{ after(grammarAccess.getSelectExpressionAccess().getRefNamedElementQCREFParserRuleCall_1_0_2_0_1()); }
)
{ after(grammarAccess.getSelectExpressionAccess().getRefNamedElementCrossReference_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__ArgsAssignment_1_0_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getArgsExpressionParserRuleCall_1_0_3_1_0_0()); }
	ruleExpression{ after(grammarAccess.getSelectExpressionAccess().getArgsExpressionParserRuleCall_1_0_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__ArgsAssignment_1_0_3_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectExpressionAccess().getArgsExpressionParserRuleCall_1_0_3_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getSelectExpressionAccess().getArgsExpressionParserRuleCall_1_0_3_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__CoreAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getCoreCircumflexAccentKeyword_0_0()); }
(
{ before(grammarAccess.getNamedElementRefAccess().getCoreCircumflexAccentKeyword_0_0()); }

	CircumflexAccent 

{ after(grammarAccess.getNamedElementRefAccess().getCoreCircumflexAccentKeyword_0_0()); }
)

{ after(grammarAccess.getNamedElementRefAccess().getCoreCircumflexAccentKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getRefNamedElementCrossReference_1_0()); }
(
{ before(grammarAccess.getNamedElementRefAccess().getRefNamedElementQCREFParserRuleCall_1_0_1()); }
	ruleQCREF{ after(grammarAccess.getNamedElementRefAccess().getRefNamedElementQCREFParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getNamedElementRefAccess().getRefNamedElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__ArgsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getArgsExpressionParserRuleCall_2_1_0_0()); }
	ruleExpression{ after(grammarAccess.getNamedElementRefAccess().getArgsExpressionParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementRef__ArgsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementRefAccess().getArgsExpressionParserRuleCall_2_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getNamedElementRefAccess().getArgsExpressionParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__MinimumAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getMinimumExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getRangeExpressionAccess().getMinimumExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__MaximumAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getMaximumExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getRangeExpressionAccess().getMaximumExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__DeltaAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getDeltaExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getRangeExpressionAccess().getDeltaExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__IfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedNamedElement__ElemAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrappedNamedElementAccess().getElemNamedElementCrossReference_1_0()); }
(
{ before(grammarAccess.getWrappedNamedElementAccess().getElemNamedElementIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getWrappedNamedElementAccess().getElemNamedElementIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getWrappedNamedElementAccess().getElemNamedElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EBooleanLiteral__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
(
{ before(grammarAccess.getEBooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }

	True 

{ after(grammarAccess.getEBooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
)

{ after(grammarAccess.getEBooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerLiteralAccess().getValueINTVALUEParserRuleCall_1_0()); }
	ruleINTVALUE{ after(grammarAccess.getEIntegerLiteralAccess().getValueINTVALUEParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ERealLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getERealLiteralAccess().getValueSignedRealParserRuleCall_1_0()); }
	ruleSignedReal{ after(grammarAccess.getERealLiteralAccess().getValueSignedRealParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EStringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringLiteralAccess().getValueNoQuoteStringParserRuleCall_1_0()); }
	ruleNoQuoteString{ after(grammarAccess.getEStringLiteralAccess().getValueNoQuoteStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getElementsExpressionParserRuleCall_1_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getElementsExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ElementsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getElementsExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getElementsExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__FieldValuesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getFieldValuesFieldValueParserRuleCall_3_0_0()); }
	ruleFieldValue{ after(grammarAccess.getRecordLiteralAccess().getFieldValuesFieldValueParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteral__FieldValuesAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralAccess().getFieldValuesFieldValueParserRuleCall_3_1_1_0()); }
	ruleFieldValue{ after(grammarAccess.getRecordLiteralAccess().getFieldValuesFieldValueParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFieldValueAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getFieldValueAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionLiteral__FieldValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionLiteralAccess().getFieldValueFieldValueParserRuleCall_3_0()); }
	ruleFieldValue{ after(grammarAccess.getUnionLiteralAccess().getFieldValueFieldValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyQPREFParserRuleCall_0_0_1()); }
	ruleQPREF{ after(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyQPREFParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__AppendAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }

	PlusSignEqualsSignGreaterThanSign 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
)

{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__ConstantAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }

	Constant 

{ after(grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
)

{ after(grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__OwnedValueAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); }
	ruleOptionalModalPropertyValue{ after(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__OwnedValueAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); }
	ruleOptionalModalPropertyValue{ after(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__AppliesToAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_1_0()); }
	ruleContainmentPath{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__AppliesToAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_1_0()); }
	ruleContainmentPath{ after(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainedPropertyAssociation__InBindingAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_2_0()); }
(
{ before(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierQCREFParserRuleCall_5_2_0_1()); }
	ruleQCREF{ after(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierQCREFParserRuleCall_5_2_0_1()); }
)
{ after(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getPropertyAssociationAccess().getPropertyPropertyQPREFParserRuleCall_0_0_1()); }
	ruleQPREF{ after(grammarAccess.getPropertyAssociationAccess().getPropertyPropertyQPREFParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__AppendAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
(
{ before(grammarAccess.getPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }

	PlusSignEqualsSignGreaterThanSign 

{ after(grammarAccess.getPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
)

{ after(grammarAccess.getPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__ConstantAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
(
{ before(grammarAccess.getPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }

	Constant 

{ after(grammarAccess.getPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
)

{ after(grammarAccess.getPropertyAssociationAccess().getConstantConstantKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__OwnedValueAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); }
	ruleOptionalModalPropertyValue{ after(grammarAccess.getPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__OwnedValueAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); }
	ruleOptionalModalPropertyValue{ after(grammarAccess.getPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAssociation__InBindingAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAssociationAccess().getInBindingClassifierCrossReference_4_2_0()); }
(
{ before(grammarAccess.getPropertyAssociationAccess().getInBindingClassifierQCREFParserRuleCall_4_2_0_1()); }
	ruleQCREF{ after(grammarAccess.getPropertyAssociationAccess().getInBindingClassifierQCREFParserRuleCall_4_2_0_1()); }
)
{ after(grammarAccess.getPropertyAssociationAccess().getInBindingClassifierCrossReference_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ContainmentPath__PathAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); }
	ruleContainmentPathElement{ after(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OptionalModalPropertyValue__OwnedValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); }
	rulePropertyExpression{ after(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__InModeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_2_0()); }
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeIDTerminalRuleCall_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeIDTerminalRuleCall_1_2_0_1()); }
)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalModalPropertyValue__InModeAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_1_0()); }
(
{ before(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeIDTerminalRuleCall_1_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeIDTerminalRuleCall_1_3_1_0_1()); }
)
{ after(grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValue__OwnedValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); }
	rulePropertyExpression{ after(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ConstantValue__NamedValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); }
(
{ before(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantQPREFParserRuleCall_0_1()); }
	ruleQPREF{ after(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantQPREFParserRuleCall_0_1()); }
)
{ after(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FieldPropertyAssociation__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldPropertyAssociation__OwnedValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); }
	rulePropertyExpression{ after(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__NamedElementAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); }
(
{ before(grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__ArrayRangeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); }
	ruleArrayRange{ after(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainmentPathElement__PathAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); }
	ruleContainmentPathElement{ after(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRange__LowerBoundAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); }
	ruleINTVALUE{ after(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRange__UpperBoundAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); }
	ruleINTVALUE{ after(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedConstant__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); }
	rulePlusMinus{ after(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedConstant__OwnedPropertyExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); }
	ruleConstantValue{ after(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTerm__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTermAccess().getValueSignedIntParserRuleCall_0_0()); }
	ruleSignedInt{ after(grammarAccess.getIntegerTermAccess().getValueSignedIntParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTerm__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
(
{ before(grammarAccess.getIntegerTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getIntegerTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealTerm__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTermAccess().getValueSignedRealParserRuleCall_0_0()); }
	ruleSignedReal{ after(grammarAccess.getRealTermAccess().getValueSignedRealParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealTerm__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
(
{ before(grammarAccess.getRealTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRealTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





