/*
 * generated by Xtext
 */
package org.osate.expr.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.osate.expr.services.ExprGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractExprSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ExprGrammarAccess grammarAccess;
	protected AbstractElementAlias match_VarDecl___EqualsSignKeyword_3_0_ExpressionParserRuleCall_3_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ExprGrammarAccess) access;
		match_VarDecl___EqualsSignKeyword_3_0_ExpressionParserRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getVarDeclAccess().getExpressionParserRuleCall_3_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getExpressionRule())
			return getExpressionToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Expression:
	 * 	'???'
	 * ;
	 */
	protected String getExpressionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "???";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_VarDecl___EqualsSignKeyword_3_0_ExpressionParserRuleCall_3_1__q.equals(syntax))
				emit_VarDecl___EqualsSignKeyword_3_0_ExpressionParserRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('=' Expression)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     type=Type (ambiguity) ';' (rule end)
	 */
	protected void emit_VarDecl___EqualsSignKeyword_3_0_ExpressionParserRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
