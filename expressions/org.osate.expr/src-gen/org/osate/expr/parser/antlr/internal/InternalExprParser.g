/*
 * generated by Xtext
 */
parser grammar InternalExprParser;

options {
	tokenVocab=InternalExprLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.osate.expr.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.expr.services.ExprGrammarAccess;

}

@members {


	private ExprGrammarAccess grammarAccess;
	 	
	public InternalExprParser(TokenStream input, ExprGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "ExprModel";	
	} 
	   	   	
	@Override
	protected ExprGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleExprModel
entryRuleExprModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprModelRule()); }
	 iv_ruleExprModel=ruleExprModel 
	 { $current=$iv_ruleExprModel.current; } 
	 EOF 
;

// Rule ExprModel
ruleExprModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Library
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprModelAccess().getLibraryKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprModelAccess().getAnnexExprLibraryParserRuleCall_0_1_0()); 
	    }
		lv_annex_1_0=ruleExprLibrary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprModelRule());
	        }
       		set(
       			$current, 
       			"annex",
        		lv_annex_1_0, 
        		"org.osate.expr.Expr.ExprLibrary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_2=Subclause
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprModelAccess().getSubclauseKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprModelAccess().getAnnexExprSubclauseParserRuleCall_1_1_0()); 
	    }
		lv_annex_3_0=ruleExprSubclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprModelRule());
	        }
       		set(
       			$current, 
       			"annex",
        		lv_annex_3_0, 
        		"org.osate.expr.Expr.ExprSubclause");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExprLibrary
entryRuleExprLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprLibraryRule()); }
	 iv_ruleExprLibrary=ruleExprLibrary 
	 { $current=$iv_ruleExprLibrary.current; } 
	 EOF 
;

// Rule ExprLibrary
ruleExprLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExprLibraryAccess().getExprLibraryAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprLibraryAccess().getDeclsDeclarationParserRuleCall_1_0()); 
	    }
		lv_decls_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprLibraryRule());
	        }
       		add(
       			$current, 
       			"decls",
        		lv_decls_1_0, 
        		"org.osate.expr.Expr.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExprSubclause
entryRuleExprSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprSubclauseRule()); }
	 iv_ruleExprSubclause=ruleExprSubclause 
	 { $current=$iv_ruleExprSubclause.current; } 
	 EOF 
;

// Rule ExprSubclause
ruleExprSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExprSubclauseAccess().getExprSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSubclauseAccess().getDeclsDeclarationParserRuleCall_1_0()); 
	    }
		lv_decls_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSubclauseRule());
	        }
       		add(
       			$current, 
       			"decls",
        		lv_decls_1_0, 
        		"org.osate.expr.Expr.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_0()); 
    }
    this_TypeDecl_0=ruleTypeDecl
    {
        $current = $this_TypeDecl_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_1()); 
    }
    this_VarDecl_1=ruleVarDecl
    {
        $current = $this_VarDecl_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getFunDeclParserRuleCall_2()); 
    }
    this_FunDecl_2=ruleFunDecl
    {
        $current = $this_FunDecl_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Type
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.osate.expr.Expr.ID");
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_const_0_0=
	Val
    {
        newLeafNode(lv_const_0_0, grammarAccess.getVarDeclAccess().getConstValKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed($current, "const", true, "val");
	    }

)
)
    |
	otherlv_1=Var
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclAccess().getVarKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.osate.expr.Expr.ID");
	    }

)
)(
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_5=EqualsSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getVarDeclAccess().getEqualsSignKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getVarDeclAccess().getExpressionParserRuleCall_3_1()); 
    }
ruleExpression
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getVarDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFunDecl
entryRuleFunDecl returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunDeclRule()); }
	 iv_ruleFunDecl=ruleFunDecl 
	 { $current=$iv_ruleFunDecl.current; } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Def
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunDeclAccess().getDefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.osate.expr.Expr.ID");
	    }

)
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_2());
    }

	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_3());
    }

	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    {
        $current = $this_PrimitiveType_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getCategoryParserRuleCall_1()); 
    }
    this_Category_1=ruleCategory
    {
        $current = $this_Category_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getMetaClassParserRuleCall_2()); 
    }
    this_MetaClass_2=ruleMetaClass
    {
        $current = $this_MetaClass_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_3()); 
    }
    this_RecordType_3=ruleRecordType
    {
        $current = $this_RecordType_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getUnionTypeParserRuleCall_4()); 
    }
    this_UnionType_4=ruleUnionType
    {
        $current = $this_UnionType_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_5()); 
    }
    this_TupleType_5=ruleTupleType
    {
        $current = $this_TupleType_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getListTypeParserRuleCall_6()); 
    }
    this_ListType_6=ruleListType
    {
        $current = $this_ListType_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSetTypeParserRuleCall_7()); 
    }
    this_SetType_7=ruleSetType
    {
        $current = $this_SetType_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBagTypeParserRuleCall_8()); 
    }
    this_BagType_8=ruleBagType
    {
        $current = $this_BagType_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_9()); 
    }
    this_MapType_9=ruleMapType
    {
        $current = $this_MapType_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypeRefParserRuleCall_10()); 
    }
    this_TypeRef_10=ruleTypeRef
    {
        $current = $this_TypeRef_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getBooleanAction_0_0(),
            $current);
    }
)
	otherlv_1=Bool
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimitiveTypeAccess().getBoolKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getIntegerAction_1_0(),
            $current);
    }
)
	otherlv_3=Int
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimitiveTypeAccess().getIntKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getRealAction_2_0(),
            $current);
    }
)
	otherlv_5=Real
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimitiveTypeAccess().getRealKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getStringAction_3_0(),
            $current);
    }
)
	otherlv_7=String
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimitiveTypeAccess().getStringKeyword_3_1());
    }
))
;





// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCategoryRule()); }
	 iv_ruleCategory=ruleCategory 
	 { $current=$iv_ruleCategory.current; } 
	 EOF 
;

// Rule Category
ruleCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getCategoryCategoryEnumEnumRuleCall_0()); 
	    }
		lv_category_0_0=ruleCategoryEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		set(
       			$current, 
       			"category",
        		lv_category_0_0, 
        		"org.osate.expr.Expr.CategoryEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMetaClass
entryRuleMetaClass returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMetaClassRule()); }
	 iv_ruleMetaClass=ruleMetaClass 
	 { $current=$iv_ruleMetaClass.current; } 
	 EOF 
;

// Rule MetaClass
ruleMetaClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaClassAccess().getClassMetaClassEnumEnumRuleCall_0()); 
	    }
		lv_class_0_0=ruleMetaClassEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaClassRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_0_0, 
        		"org.osate.expr.Expr.MetaClassEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRecordType
entryRuleRecordType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	 iv_ruleRecordType=ruleRecordType 
	 { $current=$iv_ruleRecordType.current; } 
	 EOF 
;

// Rule RecordType
ruleRecordType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecordTypeAccess().getRecordTypeAction_0(),
            $current);
    }
)
	otherlv_1=Record
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordTypeAccess().getRecordKeyword_1());
    }

	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getFieldFieldParserRuleCall_3_0()); 
	    }
		lv_field_3_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		add(
       			$current, 
       			"field",
        		lv_field_3_0, 
        		"org.osate.expr.Expr.Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.osate.expr.Expr.ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleUnionType
entryRuleUnionType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnionTypeRule()); }
	 iv_ruleUnionType=ruleUnionType 
	 { $current=$iv_ruleUnionType.current; } 
	 EOF 
;

// Rule UnionType
ruleUnionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnionTypeAccess().getUnionTypeAction_0(),
            $current);
    }
)
	otherlv_1=Union
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionTypeAccess().getUnionKeyword_1());
    }

	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2());
    }

	otherlv_3=QuestionMarkQuestionMarkQuestionMark
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionTypeAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_3());
    }

	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTupleType
entryRuleTupleType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTupleTypeRule()); }
	 iv_ruleTupleType=ruleTupleType 
	 { $current=$iv_ruleTupleType.current; } 
	 EOF 
;

// Rule TupleType
ruleTupleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleTypeAccess().getTupleTypeAction_0(),
            $current);
    }
)
	otherlv_1=Tuple
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleTypeAccess().getTupleKeyword_1());
    }

	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getTupleTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeAccess().getFieldTupleFieldParserRuleCall_3_0()); 
	    }
		lv_field_3_0=ruleTupleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeRule());
	        }
       		add(
       			$current, 
       			"field",
        		lv_field_3_0, 
        		"org.osate.expr.Expr.TupleField");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getTupleTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTupleField
entryRuleTupleField returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTupleFieldRule()); }
	 iv_ruleTupleField=ruleTupleField 
	 { $current=$iv_ruleTupleField.current; } 
	 EOF 
;

// Rule TupleField
ruleTupleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleFieldAccess().getFieldAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleFieldAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getTupleFieldAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleListType
entryRuleListType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getListTypeRule()); }
	 iv_ruleListType=ruleListType 
	 { $current=$iv_ruleListType.current; } 
	 EOF 
;

// Rule ListType
ruleListType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTypeAccess().getListTypeAction_0(),
            $current);
    }
)
	otherlv_1=List
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTypeAccess().getListKeyword_1());
    }

	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getListTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getListTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSetType
entryRuleSetType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSetTypeRule()); }
	 iv_ruleSetType=ruleSetType 
	 { $current=$iv_ruleSetType.current; } 
	 EOF 
;

// Rule SetType
ruleSetType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Set
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetTypeAccess().getSetKeyword_0());
    }

	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetTypeAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBagType
entryRuleBagType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBagTypeRule()); }
	 iv_ruleBagType=ruleBagType 
	 { $current=$iv_ruleBagType.current; } 
	 EOF 
;

// Rule BagType
ruleBagType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Bag
    {
    	newLeafNode(otherlv_0, grammarAccess.getBagTypeAccess().getBagKeyword_0());
    }

	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getBagTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBagTypeAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBagTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBagTypeAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMapType
entryRuleMapType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	 iv_ruleMapType=ruleMapType 
	 { $current=$iv_ruleMapType.current; } 
	 EOF 
;

// Rule MapType
ruleMapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Map
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
    }

	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getDomTypeParserRuleCall_2_0()); 
	    }
		lv_dom_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"dom",
        		lv_dom_2_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=HyphenMinusGreaterThanSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getImgTypeParserRuleCall_4_0()); 
	    }
		lv_img_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"img",
        		lv_img_4_0, 
        		"org.osate.expr.Expr.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=RightCurlyBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getMapTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getRefTypeDeclCrossReference_0()); 
	    }
		ruleQCREF
		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current.getText(); }  
	 EOF 
;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=QuestionMarkQuestionMarkQuestionMark 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword()); 
    }

    ;











// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;







// Rule CategoryEnum
ruleCategoryEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=ABSTRACT
    {
        $current = grammarAccess.getCategoryEnumAccess().getABSTRACTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCategoryEnumAccess().getABSTRACTEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=BUS
    {
        $current = grammarAccess.getCategoryEnumAccess().getBUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCategoryEnumAccess().getBUSEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=DATA
    {
        $current = grammarAccess.getCategoryEnumAccess().getDATAEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCategoryEnumAccess().getDATAEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=DEVICE
    {
        $current = grammarAccess.getCategoryEnumAccess().getDEVICEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCategoryEnumAccess().getDEVICEEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=MEMEORY
    {
        $current = grammarAccess.getCategoryEnumAccess().getMEMEORYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCategoryEnumAccess().getMEMEORYEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=PROCESS
    {
        $current = grammarAccess.getCategoryEnumAccess().getPROCESSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCategoryEnumAccess().getPROCESSEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=PROCESSOR
    {
        $current = grammarAccess.getCategoryEnumAccess().getPROCESSOREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCategoryEnumAccess().getPROCESSOREnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=SUBPROGRAM
    {
        $current = grammarAccess.getCategoryEnumAccess().getSUBPROGRAMEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getCategoryEnumAccess().getSUBPROGRAMEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=SUBPROGRAMGROUP
    {
        $current = grammarAccess.getCategoryEnumAccess().getSUBPROGRAMGROUPEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getCategoryEnumAccess().getSUBPROGRAMGROUPEnumLiteralDeclaration_8()); 
    }
)
    |(    enumLiteral_9=SYSTEM
    {
        $current = grammarAccess.getCategoryEnumAccess().getSYSTEMEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getCategoryEnumAccess().getSYSTEMEnumLiteralDeclaration_9()); 
    }
)
    |(    enumLiteral_10=THREAD_GROUP
    {
        $current = grammarAccess.getCategoryEnumAccess().getTHREAD_GROUPEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getCategoryEnumAccess().getTHREAD_GROUPEnumLiteralDeclaration_10()); 
    }
)
    |(    enumLiteral_11=THREAD
    {
        $current = grammarAccess.getCategoryEnumAccess().getTHREADEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getCategoryEnumAccess().getTHREADEnumLiteralDeclaration_11()); 
    }
)
    |(    enumLiteral_12=VIRTUAL_BUS
    {
        $current = grammarAccess.getCategoryEnumAccess().getVIRTUAL_BUSEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getCategoryEnumAccess().getVIRTUAL_BUSEnumLiteralDeclaration_12()); 
    }
)
    |(    enumLiteral_13=VIRTUAL_PROCESSOR
    {
        $current = grammarAccess.getCategoryEnumAccess().getVIRTUAL_PROCESSOREnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getCategoryEnumAccess().getVIRTUAL_PROCESSOREnumLiteralDeclaration_13()); 
    }
));



// Rule MetaClassEnum
ruleMetaClassEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=CLASSIFIER
    {
        $current = grammarAccess.getMetaClassEnumAccess().getCLASSIFIEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMetaClassEnumAccess().getCLASSIFIEREnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=SUBCOMPONENT
    {
        $current = grammarAccess.getMetaClassEnumAccess().getSUBCOMPONENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMetaClassEnumAccess().getSUBCOMPONENTEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=FEATURE
    {
        $current = grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMetaClassEnumAccess().getFEATUREEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=CONNECTION
    {
        $current = grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMetaClassEnumAccess().getCONNECTIONEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=FLOW
    {
        $current = grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMetaClassEnumAccess().getFLOWEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=MODE
    {
        $current = grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getMetaClassEnumAccess().getMODEEnumLiteralDeclaration_5()); 
    }
));



