/*
 * generated by Xtext
 */
package org.osate.expr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ExprGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExprModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.ExprModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLibraryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnexExprLibraryParserRuleCall_0_1_0 = (RuleCall)cAnnexAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubclauseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnexExprSubclauseParserRuleCall_1_1_0 = (RuleCall)cAnnexAssignment_1_1.eContents().get(0);
		
		//// for testing
		//ExprModel:
		//	'library' annex=ExprLibrary
		//	| 'subclause' annex=ExprSubclause;
		@Override public ParserRule getRule() { return rule; }

		//'library' annex=ExprLibrary | 'subclause' annex=ExprSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//'library' annex=ExprLibrary
		public Group getGroup_0() { return cGroup_0; }

		//'library'
		public Keyword getLibraryKeyword_0_0() { return cLibraryKeyword_0_0; }

		//annex=ExprLibrary
		public Assignment getAnnexAssignment_0_1() { return cAnnexAssignment_0_1; }

		//ExprLibrary
		public RuleCall getAnnexExprLibraryParserRuleCall_0_1_0() { return cAnnexExprLibraryParserRuleCall_0_1_0; }

		//'subclause' annex=ExprSubclause
		public Group getGroup_1() { return cGroup_1; }

		//'subclause'
		public Keyword getSubclauseKeyword_1_0() { return cSubclauseKeyword_1_0; }

		//annex=ExprSubclause
		public Assignment getAnnexAssignment_1_1() { return cAnnexAssignment_1_1; }

		//ExprSubclause
		public RuleCall getAnnexExprSubclauseParserRuleCall_1_1_0() { return cAnnexExprSubclauseParserRuleCall_1_1_0; }
	}

	public class ExprLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.ExprLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclsAssignment_1.eContents().get(0);
		
		//@Exported
		//ExprLibrary aadl2::AnnexLibrary:
		//	{ExprLibrary} decls+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{ExprLibrary} decls+=Declaration*
		public Group getGroup() { return cGroup; }

		//{ExprLibrary}
		public Action getExprLibraryAction_0() { return cExprLibraryAction_0; }

		//decls+=Declaration*
		public Assignment getDeclsAssignment_1() { return cDeclsAssignment_1; }

		//Declaration
		public RuleCall getDeclsDeclarationParserRuleCall_1_0() { return cDeclsDeclarationParserRuleCall_1_0; }
	}

	public class ExprSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.ExprSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclsAssignment_1.eContents().get(0);
		
		//ExprSubclause aadl2::AnnexSubclause:
		//	{ExprSubclause} decls+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{ExprSubclause} decls+=Declaration*
		public Group getGroup() { return cGroup; }

		//{ExprSubclause}
		public Action getExprSubclauseAction_0() { return cExprSubclauseAction_0; }

		//decls+=Declaration*
		public Assignment getDeclsAssignment_1() { return cDeclsAssignment_1; }

		//Declaration
		public RuleCall getDeclsDeclarationParserRuleCall_1_0() { return cDeclsDeclarationParserRuleCall_1_0; }
	}

	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.NamedElement");
		private final RuleCall cDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NamedElement:
		//	Declaration;
		@Override public ParserRule getRule() { return rule; }

		//Declaration
		public RuleCall getDeclarationParserRuleCall() { return cDeclarationParserRuleCall; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//@Exported
		//Declaration:
		//	TypeDecl | VarDecl | FunDecl;
		@Override public ParserRule getRule() { return rule; }

		//TypeDecl | VarDecl | FunDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_0() { return cTypeDeclParserRuleCall_0; }

		//VarDecl
		public RuleCall getVarDeclParserRuleCall_1() { return cVarDeclParserRuleCall_1; }

		//FunDecl
		public RuleCall getFunDeclParserRuleCall_2() { return cFunDeclParserRuleCall_2; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeDecl:
		//	'type' name=ID ':' type=Type ';';
		@Override public ParserRule getRule() { return rule; }

		//'type' name=ID ':' type=Type ';'
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cConstAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cConstValKeyword_0_0_0 = (Keyword)cConstAssignment_0_0.eContents().get(0);
		private final Keyword cVarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDecl:
		//	(const?='val' | 'var') name=ID (':' type=Type)? ('=' Expression)? ';';
		@Override public ParserRule getRule() { return rule; }

		//(const?='val' | 'var') name=ID (':' type=Type)? ('=' Expression)? ';'
		public Group getGroup() { return cGroup; }

		//const?='val' | 'var'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//const?='val'
		public Assignment getConstAssignment_0_0() { return cConstAssignment_0_0; }

		//'val'
		public Keyword getConstValKeyword_0_0_0() { return cConstValKeyword_0_0_0; }

		//'var'
		public Keyword getVarKeyword_0_1() { return cVarKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(':' type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }

		//('=' Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FunDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.FunDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunDecl:
		//	'def' name=ID '(' ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//'def' name=ID '(' ')' ';'
		public Group getGroup() { return cGroup; }

		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCategoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMetaClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnionTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTupleTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBagTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMapTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTypeRefParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//// Types
		//Type:
		//	PrimitiveType | Category | MetaClass
		//	| RecordType | UnionType | TupleType | ListType | SetType | BagType | MapType | TypeRef;
		@Override public ParserRule getRule() { return rule; }

		//PrimitiveType | Category | MetaClass | RecordType | UnionType | TupleType | ListType | SetType | BagType | MapType |
		//TypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//Category
		public RuleCall getCategoryParserRuleCall_1() { return cCategoryParserRuleCall_1; }

		//MetaClass
		public RuleCall getMetaClassParserRuleCall_2() { return cMetaClassParserRuleCall_2; }

		//RecordType
		public RuleCall getRecordTypeParserRuleCall_3() { return cRecordTypeParserRuleCall_3; }

		//UnionType
		public RuleCall getUnionTypeParserRuleCall_4() { return cUnionTypeParserRuleCall_4; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_5() { return cTupleTypeParserRuleCall_5; }

		//ListType
		public RuleCall getListTypeParserRuleCall_6() { return cListTypeParserRuleCall_6; }

		//SetType
		public RuleCall getSetTypeParserRuleCall_7() { return cSetTypeParserRuleCall_7; }

		//BagType
		public RuleCall getBagTypeParserRuleCall_8() { return cBagTypeParserRuleCall_8; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_9() { return cMapTypeParserRuleCall_9; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_10() { return cTypeRefParserRuleCall_10; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBoolKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRealKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStringKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//PrimitiveType:
		//	{Boolean} 'bool' | {Integer} 'int' | {Real} 'real' | {String} 'string';
		@Override public ParserRule getRule() { return rule; }

		//{Boolean} 'bool' | {Integer} 'int' | {Real} 'real' | {String} 'string'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Boolean} 'bool'
		public Group getGroup_0() { return cGroup_0; }

		//{Boolean}
		public Action getBooleanAction_0_0() { return cBooleanAction_0_0; }

		//'bool'
		public Keyword getBoolKeyword_0_1() { return cBoolKeyword_0_1; }

		//{Integer} 'int'
		public Group getGroup_1() { return cGroup_1; }

		//{Integer}
		public Action getIntegerAction_1_0() { return cIntegerAction_1_0; }

		//'int'
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }

		//{Real} 'real'
		public Group getGroup_2() { return cGroup_2; }

		//{Real}
		public Action getRealAction_2_0() { return cRealAction_2_0; }

		//'real'
		public Keyword getRealKeyword_2_1() { return cRealKeyword_2_1; }

		//{String} 'string'
		public Group getGroup_3() { return cGroup_3; }

		//{String}
		public Action getStringAction_3_0() { return cStringAction_3_0; }

		//'string'
		public Keyword getStringKeyword_3_1() { return cStringKeyword_3_1; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.Category");
		private final Assignment cCategoryAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCategoryCategoryEnumEnumRuleCall_0 = (RuleCall)cCategoryAssignment.eContents().get(0);
		
		//Category:
		//	category=CategoryEnum;
		@Override public ParserRule getRule() { return rule; }

		//category=CategoryEnum
		public Assignment getCategoryAssignment() { return cCategoryAssignment; }

		//CategoryEnum
		public RuleCall getCategoryCategoryEnumEnumRuleCall_0() { return cCategoryCategoryEnumEnumRuleCall_0; }
	}

	public class MetaClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.MetaClass");
		private final Assignment cClassAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassMetaClassEnumEnumRuleCall_0 = (RuleCall)cClassAssignment.eContents().get(0);
		
		//MetaClass:
		//	class=MetaClassEnum;
		@Override public ParserRule getRule() { return rule; }

		//class=MetaClassEnum
		public Assignment getClassAssignment() { return cClassAssignment; }

		//MetaClassEnum
		public RuleCall getClassMetaClassEnumEnumRuleCall_0() { return cClassMetaClassEnumEnumRuleCall_0; }
	}

	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.RecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldFieldParserRuleCall_3_0 = (RuleCall)cFieldAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RecordType:
		//	{RecordType}
		//	'record' '{'
		//	field+=Field*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{RecordType} 'record' '{' field+=Field* '}'
		public Group getGroup() { return cGroup; }

		//{RecordType}
		public Action getRecordTypeAction_0() { return cRecordTypeAction_0; }

		//'record'
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//field+=Field*
		public Assignment getFieldAssignment_3() { return cFieldAssignment_3; }

		//Field
		public RuleCall getFieldFieldParserRuleCall_3_0() { return cFieldFieldParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Field:
		//	name=ID ':' type=Type ';';
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type ';'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class UnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.UnionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkQuestionMarkQuestionMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnionType:
		//	{UnionType}
		//	'union' '{'
		//	'???'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{UnionType} 'union' '{' '???' '}'
		public Group getGroup() { return cGroup; }

		//{UnionType}
		public Action getUnionTypeAction_0() { return cUnionTypeAction_0; }

		//'union'
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'???'
		public Keyword getQuestionMarkQuestionMarkQuestionMarkKeyword_3() { return cQuestionMarkQuestionMarkQuestionMarkKeyword_3; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldTupleFieldParserRuleCall_3_0 = (RuleCall)cFieldAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleType:
		//	{TupleType}
		//	'tuple' '{'
		//	field+=TupleField*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{TupleType} 'tuple' '{' field+=TupleField* '}'
		public Group getGroup() { return cGroup; }

		//{TupleType}
		public Action getTupleTypeAction_0() { return cTupleTypeAction_0; }

		//'tuple'
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//field+=TupleField*
		public Assignment getFieldAssignment_3() { return cFieldAssignment_3; }

		//TupleField
		public RuleCall getFieldTupleFieldParserRuleCall_3_0() { return cFieldTupleFieldParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TupleFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.TupleField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TupleField:
		//	{Field} type=Type ';';
		@Override public ParserRule getRule() { return rule; }

		//{Field} type=Type ';'
		public Group getGroup() { return cGroup; }

		//{Field}
		public Action getFieldAction_0() { return cFieldAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListType:
		//	{ListType}
		//	'list' '{' type=Type '}';
		@Override public ParserRule getRule() { return rule; }

		//{ListType} 'list' '{' type=Type '}'
		public Group getGroup() { return cGroup; }

		//{ListType}
		public Action getListTypeAction_0() { return cListTypeAction_0; }

		//'list'
		public Keyword getListKeyword_1() { return cListKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetType:
		//	'set' '{' type=Type '}';
		@Override public ParserRule getRule() { return rule; }

		//'set' '{' type=Type '}'
		public Group getGroup() { return cGroup; }

		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BagTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.BagType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BagType:
		//	'bag' '{' type=Type '}';
		@Override public ParserRule getRule() { return rule; }

		//'bag' '{' type=Type '}'
		public Group getGroup() { return cGroup; }

		//'bag'
		public Keyword getBagKeyword_0() { return cBagKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomTypeParserRuleCall_2_0 = (RuleCall)cDomAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImgTypeParserRuleCall_4_0 = (RuleCall)cImgAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapType:
		//	'map' '{' dom=Type '->' img=Type '}';
		@Override public ParserRule getRule() { return rule; }

		//'map' '{' dom=Type '->' img=Type '}'
		public Group getGroup() { return cGroup; }

		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//dom=Type
		public Assignment getDomAssignment_2() { return cDomAssignment_2; }

		//Type
		public RuleCall getDomTypeParserRuleCall_2_0() { return cDomTypeParserRuleCall_2_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//img=Type
		public Assignment getImgAssignment_4() { return cImgAssignment_4; }

		//Type
		public RuleCall getImgTypeParserRuleCall_4_0() { return cImgTypeParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.TypeRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefTypeDeclCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefTypeDeclQCREFParserRuleCall_0_1 = (RuleCall)cRefTypeDeclCrossReference_0.eContents().get(1);
		
		//TypeRef:
		//	ref=[TypeDecl|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//ref=[TypeDecl|QCREF]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[TypeDecl|QCREF]
		public CrossReference getRefTypeDeclCrossReference_0() { return cRefTypeDeclCrossReference_0; }

		//QCREF
		public RuleCall getRefTypeDeclQCREFParserRuleCall_0_1() { return cRefTypeDeclQCREFParserRuleCall_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.Expression");
		private final Keyword cQuestionMarkQuestionMarkQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//Expression:
		//	'???';
		@Override public ParserRule getRule() { return rule; }

		//'???'
		public Keyword getQuestionMarkQuestionMarkQuestionMarkKeyword() { return cQuestionMarkQuestionMarkQuestionMarkKeyword; }
	}

	public class INTVALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.INTVALUE");
		private final RuleCall cINTEGER_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTVALUE aadl2::Integer:
		//	INTEGER_LIT //NUMERAL 	
		//;
		@Override public ParserRule getRule() { return rule; }

		//INTEGER_LIT
		public RuleCall getINTEGER_LITTerminalRuleCall() { return cINTEGER_LITTerminalRuleCall; }
	}

	public class QCLREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.QCLREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QCLREF:
		//	ID '::' ID;
		@Override public ParserRule getRule() { return rule; }

		//ID '::' ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QPREF:
		//	ID ('::' ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ('::' ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('::' ID)?
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID '::')* ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID '::')* ID ('.' ID)?
		public Group getGroup() { return cGroup; }

		//(ID '::')*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//('.' ID)?
		public Group getGroup_2() { return cGroup_2; }

		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class STARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.STAR");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//STAR:
		//	'*';
		@Override public ParserRule getRule() { return rule; }

		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	
	
	public class CategoryEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.CategoryEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cABSTRACTABSTRACTKeyword_0_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBUSBUSKeyword_1_0 = (Keyword)cBUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDATAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDATADATAKeyword_2_0 = (Keyword)cDATAEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEVICEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDEVICEDEVICEKeyword_3_0 = (Keyword)cDEVICEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMEMEORYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMEMEORYMEMEORYKeyword_4_0 = (Keyword)cMEMEORYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPROCESSPROCESSKeyword_5_0 = (Keyword)cPROCESSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESSOREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPROCESSORPROCESSORKeyword_6_0 = (Keyword)cPROCESSOREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSUBPROGRAMEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSUBPROGRAMSUBPROGRAMKeyword_7_0 = (Keyword)cSUBPROGRAMEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSUBPROGRAMGROUPEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSUBPROGRAMGROUPSUBPROGRAMGROUPKeyword_8_0 = (Keyword)cSUBPROGRAMGROUPEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEMEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSYSTEMSYSTEMKeyword_9_0 = (Keyword)cSYSTEMEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTHREAD_GROUPEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTHREAD_GROUPTHREAD_GROUPKeyword_10_0 = (Keyword)cTHREAD_GROUPEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTHREADEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTHREADTHREADKeyword_11_0 = (Keyword)cTHREADEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cVIRTUAL_BUSEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cVIRTUAL_BUSVIRTUAL_BUSKeyword_12_0 = (Keyword)cVIRTUAL_BUSEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cVIRTUAL_PROCESSOREnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cVIRTUAL_PROCESSORVIRTUAL_PROCESSORKeyword_13_0 = (Keyword)cVIRTUAL_PROCESSOREnumLiteralDeclaration_13.eContents().get(0);
		
		//enum CategoryEnum:
		//	ABSTRACT | BUS | DATA
		//	| DEVICE | MEMEORY | PROCESS | PROCESSOR
		//	| SUBPROGRAM | SUBPROGRAMGROUP | SYSTEM
		//	| THREAD_GROUP | THREAD | VIRTUAL_BUS | VIRTUAL_PROCESSOR;
		public EnumRule getRule() { return rule; }

		//ABSTRACT | BUS | DATA | DEVICE | MEMEORY | PROCESS | PROCESSOR | SUBPROGRAM | SUBPROGRAMGROUP | SYSTEM | THREAD_GROUP |
		//THREAD | VIRTUAL_BUS | VIRTUAL_PROCESSOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//ABSTRACT
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_0() { return cABSTRACTEnumLiteralDeclaration_0; }

		//"ABSTRACT"
		public Keyword getABSTRACTABSTRACTKeyword_0_0() { return cABSTRACTABSTRACTKeyword_0_0; }

		//BUS
		public EnumLiteralDeclaration getBUSEnumLiteralDeclaration_1() { return cBUSEnumLiteralDeclaration_1; }

		//"BUS"
		public Keyword getBUSBUSKeyword_1_0() { return cBUSBUSKeyword_1_0; }

		//DATA
		public EnumLiteralDeclaration getDATAEnumLiteralDeclaration_2() { return cDATAEnumLiteralDeclaration_2; }

		//"DATA"
		public Keyword getDATADATAKeyword_2_0() { return cDATADATAKeyword_2_0; }

		//DEVICE
		public EnumLiteralDeclaration getDEVICEEnumLiteralDeclaration_3() { return cDEVICEEnumLiteralDeclaration_3; }

		//"DEVICE"
		public Keyword getDEVICEDEVICEKeyword_3_0() { return cDEVICEDEVICEKeyword_3_0; }

		//MEMEORY
		public EnumLiteralDeclaration getMEMEORYEnumLiteralDeclaration_4() { return cMEMEORYEnumLiteralDeclaration_4; }

		//"MEMEORY"
		public Keyword getMEMEORYMEMEORYKeyword_4_0() { return cMEMEORYMEMEORYKeyword_4_0; }

		//PROCESS
		public EnumLiteralDeclaration getPROCESSEnumLiteralDeclaration_5() { return cPROCESSEnumLiteralDeclaration_5; }

		//"PROCESS"
		public Keyword getPROCESSPROCESSKeyword_5_0() { return cPROCESSPROCESSKeyword_5_0; }

		//PROCESSOR
		public EnumLiteralDeclaration getPROCESSOREnumLiteralDeclaration_6() { return cPROCESSOREnumLiteralDeclaration_6; }

		//"PROCESSOR"
		public Keyword getPROCESSORPROCESSORKeyword_6_0() { return cPROCESSORPROCESSORKeyword_6_0; }

		//SUBPROGRAM
		public EnumLiteralDeclaration getSUBPROGRAMEnumLiteralDeclaration_7() { return cSUBPROGRAMEnumLiteralDeclaration_7; }

		//"SUBPROGRAM"
		public Keyword getSUBPROGRAMSUBPROGRAMKeyword_7_0() { return cSUBPROGRAMSUBPROGRAMKeyword_7_0; }

		//SUBPROGRAMGROUP
		public EnumLiteralDeclaration getSUBPROGRAMGROUPEnumLiteralDeclaration_8() { return cSUBPROGRAMGROUPEnumLiteralDeclaration_8; }

		//"SUBPROGRAMGROUP"
		public Keyword getSUBPROGRAMGROUPSUBPROGRAMGROUPKeyword_8_0() { return cSUBPROGRAMGROUPSUBPROGRAMGROUPKeyword_8_0; }

		//SYSTEM
		public EnumLiteralDeclaration getSYSTEMEnumLiteralDeclaration_9() { return cSYSTEMEnumLiteralDeclaration_9; }

		//"SYSTEM"
		public Keyword getSYSTEMSYSTEMKeyword_9_0() { return cSYSTEMSYSTEMKeyword_9_0; }

		//THREAD_GROUP
		public EnumLiteralDeclaration getTHREAD_GROUPEnumLiteralDeclaration_10() { return cTHREAD_GROUPEnumLiteralDeclaration_10; }

		//"THREAD_GROUP"
		public Keyword getTHREAD_GROUPTHREAD_GROUPKeyword_10_0() { return cTHREAD_GROUPTHREAD_GROUPKeyword_10_0; }

		//THREAD
		public EnumLiteralDeclaration getTHREADEnumLiteralDeclaration_11() { return cTHREADEnumLiteralDeclaration_11; }

		//"THREAD"
		public Keyword getTHREADTHREADKeyword_11_0() { return cTHREADTHREADKeyword_11_0; }

		//VIRTUAL_BUS
		public EnumLiteralDeclaration getVIRTUAL_BUSEnumLiteralDeclaration_12() { return cVIRTUAL_BUSEnumLiteralDeclaration_12; }

		//"VIRTUAL_BUS"
		public Keyword getVIRTUAL_BUSVIRTUAL_BUSKeyword_12_0() { return cVIRTUAL_BUSVIRTUAL_BUSKeyword_12_0; }

		//VIRTUAL_PROCESSOR
		public EnumLiteralDeclaration getVIRTUAL_PROCESSOREnumLiteralDeclaration_13() { return cVIRTUAL_PROCESSOREnumLiteralDeclaration_13; }

		//"VIRTUAL_PROCESSOR"
		public Keyword getVIRTUAL_PROCESSORVIRTUAL_PROCESSORKeyword_13_0() { return cVIRTUAL_PROCESSORVIRTUAL_PROCESSORKeyword_13_0; }
	}

	public class MetaClassEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.MetaClassEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSIFIEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSIFIERCLASSIFIERKeyword_0_0 = (Keyword)cCLASSIFIEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBCOMPONENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBCOMPONENTSUBCOMPONENTKeyword_1_0 = (Keyword)cSUBCOMPONENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFEATUREEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFEATUREFEATUREKeyword_2_0 = (Keyword)cFEATUREEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONNECTIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONNECTIONCONNECTIONKeyword_3_0 = (Keyword)cCONNECTIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOWFLOWKeyword_4_0 = (Keyword)cFLOWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMODEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMODEMODEKeyword_5_0 = (Keyword)cMODEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum MetaClassEnum:
		//	CLASSIFIER | SUBCOMPONENT | FEATURE
		//	| CONNECTION | FLOW | MODE;
		public EnumRule getRule() { return rule; }

		//CLASSIFIER | SUBCOMPONENT | FEATURE | CONNECTION | FLOW | MODE
		public Alternatives getAlternatives() { return cAlternatives; }

		//CLASSIFIER
		public EnumLiteralDeclaration getCLASSIFIEREnumLiteralDeclaration_0() { return cCLASSIFIEREnumLiteralDeclaration_0; }

		//"CLASSIFIER"
		public Keyword getCLASSIFIERCLASSIFIERKeyword_0_0() { return cCLASSIFIERCLASSIFIERKeyword_0_0; }

		//SUBCOMPONENT
		public EnumLiteralDeclaration getSUBCOMPONENTEnumLiteralDeclaration_1() { return cSUBCOMPONENTEnumLiteralDeclaration_1; }

		//"SUBCOMPONENT"
		public Keyword getSUBCOMPONENTSUBCOMPONENTKeyword_1_0() { return cSUBCOMPONENTSUBCOMPONENTKeyword_1_0; }

		//FEATURE
		public EnumLiteralDeclaration getFEATUREEnumLiteralDeclaration_2() { return cFEATUREEnumLiteralDeclaration_2; }

		//"FEATURE"
		public Keyword getFEATUREFEATUREKeyword_2_0() { return cFEATUREFEATUREKeyword_2_0; }

		//CONNECTION
		public EnumLiteralDeclaration getCONNECTIONEnumLiteralDeclaration_3() { return cCONNECTIONEnumLiteralDeclaration_3; }

		//"CONNECTION"
		public Keyword getCONNECTIONCONNECTIONKeyword_3_0() { return cCONNECTIONCONNECTIONKeyword_3_0; }

		//FLOW
		public EnumLiteralDeclaration getFLOWEnumLiteralDeclaration_4() { return cFLOWEnumLiteralDeclaration_4; }

		//"FLOW"
		public Keyword getFLOWFLOWKeyword_4_0() { return cFLOWFLOWKeyword_4_0; }

		//MODE
		public EnumLiteralDeclaration getMODEEnumLiteralDeclaration_5() { return cMODEEnumLiteralDeclaration_5; }

		//"MODE"
		public Keyword getMODEMODEKeyword_5_0() { return cMODEMODEKeyword_5_0; }
	}
	
	private final ExprModelElements pExprModel;
	private final ExprLibraryElements pExprLibrary;
	private final ExprSubclauseElements pExprSubclause;
	private final NamedElementElements pNamedElement;
	private final DeclarationElements pDeclaration;
	private final TypeDeclElements pTypeDecl;
	private final VarDeclElements pVarDecl;
	private final FunDeclElements pFunDecl;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final CategoryElements pCategory;
	private final CategoryEnumElements eCategoryEnum;
	private final MetaClassElements pMetaClass;
	private final MetaClassEnumElements eMetaClassEnum;
	private final RecordTypeElements pRecordType;
	private final FieldElements pField;
	private final UnionTypeElements pUnionType;
	private final TupleTypeElements pTupleType;
	private final TupleFieldElements pTupleField;
	private final ListTypeElements pListType;
	private final SetTypeElements pSetType;
	private final BagTypeElements pBagType;
	private final MapTypeElements pMapType;
	private final TypeRefElements pTypeRef;
	private final ExpressionElements pExpression;
	private final TerminalRule tSL_COMMENT;
	private final INTVALUEElements pINTVALUE;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tINT_EXPONENT;
	private final TerminalRule tREAL_LIT;
	private final TerminalRule tINTEGER_LIT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tEXTENDED_DIGIT;
	private final TerminalRule tBASED_INTEGER;
	private final QCLREFElements pQCLREF;
	private final QPREFElements pQPREF;
	private final QCREFElements pQCREF;
	private final STARElements pSTAR;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public ExprGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pExprModel = new ExprModelElements();
		this.pExprLibrary = new ExprLibraryElements();
		this.pExprSubclause = new ExprSubclauseElements();
		this.pNamedElement = new NamedElementElements();
		this.pDeclaration = new DeclarationElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pFunDecl = new FunDeclElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pCategory = new CategoryElements();
		this.eCategoryEnum = new CategoryEnumElements();
		this.pMetaClass = new MetaClassElements();
		this.eMetaClassEnum = new MetaClassEnumElements();
		this.pRecordType = new RecordTypeElements();
		this.pField = new FieldElements();
		this.pUnionType = new UnionTypeElements();
		this.pTupleType = new TupleTypeElements();
		this.pTupleField = new TupleFieldElements();
		this.pListType = new ListTypeElements();
		this.pSetType = new SetTypeElements();
		this.pBagType = new BagTypeElements();
		this.pMapType = new MapTypeElements();
		this.pTypeRef = new TypeRefElements();
		this.pExpression = new ExpressionElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.SL_COMMENT");
		this.pINTVALUE = new INTVALUEElements();
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.EXPONENT");
		this.tINT_EXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.INT_EXPONENT");
		this.tREAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.REAL_LIT");
		this.tINTEGER_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.INTEGER_LIT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.DIGIT");
		this.tEXTENDED_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.EXTENDED_DIGIT");
		this.tBASED_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.BASED_INTEGER");
		this.pQCLREF = new QCLREFElements();
		this.pQPREF = new QPREFElements();
		this.pQCREF = new QCREFElements();
		this.pSTAR = new STARElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.expr.Expr.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.expr.Expr".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// for testing
	//ExprModel:
	//	'library' annex=ExprLibrary
	//	| 'subclause' annex=ExprSubclause;
	public ExprModelElements getExprModelAccess() {
		return pExprModel;
	}
	
	public ParserRule getExprModelRule() {
		return getExprModelAccess().getRule();
	}

	//@Exported
	//ExprLibrary aadl2::AnnexLibrary:
	//	{ExprLibrary} decls+=Declaration*;
	public ExprLibraryElements getExprLibraryAccess() {
		return pExprLibrary;
	}
	
	public ParserRule getExprLibraryRule() {
		return getExprLibraryAccess().getRule();
	}

	//ExprSubclause aadl2::AnnexSubclause:
	//	{ExprSubclause} decls+=Declaration*;
	public ExprSubclauseElements getExprSubclauseAccess() {
		return pExprSubclause;
	}
	
	public ParserRule getExprSubclauseRule() {
		return getExprSubclauseAccess().getRule();
	}

	//NamedElement:
	//	Declaration;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//@Exported
	//Declaration:
	//	TypeDecl | VarDecl | FunDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//TypeDecl:
	//	'type' name=ID ':' type=Type ';';
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//VarDecl:
	//	(const?='val' | 'var') name=ID (':' type=Type)? ('=' Expression)? ';';
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//FunDecl:
	//	'def' name=ID '(' ')' ';';
	public FunDeclElements getFunDeclAccess() {
		return pFunDecl;
	}
	
	public ParserRule getFunDeclRule() {
		return getFunDeclAccess().getRule();
	}

	//// Types
	//Type:
	//	PrimitiveType | Category | MetaClass
	//	| RecordType | UnionType | TupleType | ListType | SetType | BagType | MapType | TypeRef;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	{Boolean} 'bool' | {Integer} 'int' | {Real} 'real' | {String} 'string';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//Category:
	//	category=CategoryEnum;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//enum CategoryEnum:
	//	ABSTRACT | BUS | DATA
	//	| DEVICE | MEMEORY | PROCESS | PROCESSOR
	//	| SUBPROGRAM | SUBPROGRAMGROUP | SYSTEM
	//	| THREAD_GROUP | THREAD | VIRTUAL_BUS | VIRTUAL_PROCESSOR;
	public CategoryEnumElements getCategoryEnumAccess() {
		return eCategoryEnum;
	}
	
	public EnumRule getCategoryEnumRule() {
		return getCategoryEnumAccess().getRule();
	}

	//MetaClass:
	//	class=MetaClassEnum;
	public MetaClassElements getMetaClassAccess() {
		return pMetaClass;
	}
	
	public ParserRule getMetaClassRule() {
		return getMetaClassAccess().getRule();
	}

	//enum MetaClassEnum:
	//	CLASSIFIER | SUBCOMPONENT | FEATURE
	//	| CONNECTION | FLOW | MODE;
	public MetaClassEnumElements getMetaClassEnumAccess() {
		return eMetaClassEnum;
	}
	
	public EnumRule getMetaClassEnumRule() {
		return getMetaClassEnumAccess().getRule();
	}

	//RecordType:
	//	{RecordType}
	//	'record' '{'
	//	field+=Field*
	//	'}';
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}

	//Field:
	//	name=ID ':' type=Type ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//UnionType:
	//	{UnionType}
	//	'union' '{'
	//	'???'
	//	'}';
	public UnionTypeElements getUnionTypeAccess() {
		return pUnionType;
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}

	//TupleType:
	//	{TupleType}
	//	'tuple' '{'
	//	field+=TupleField*
	//	'}';
	public TupleTypeElements getTupleTypeAccess() {
		return pTupleType;
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}

	//TupleField:
	//	{Field} type=Type ';';
	public TupleFieldElements getTupleFieldAccess() {
		return pTupleField;
	}
	
	public ParserRule getTupleFieldRule() {
		return getTupleFieldAccess().getRule();
	}

	//ListType:
	//	{ListType}
	//	'list' '{' type=Type '}';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//SetType:
	//	'set' '{' type=Type '}';
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}

	//BagType:
	//	'bag' '{' type=Type '}';
	public BagTypeElements getBagTypeAccess() {
		return pBagType;
	}
	
	public ParserRule getBagTypeRule() {
		return getBagTypeAccess().getRule();
	}

	//MapType:
	//	'map' '{' dom=Type '->' img=Type '}';
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	//TypeRef:
	//	ref=[TypeDecl|QCREF];
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//Expression:
	//	'???';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public INTVALUEElements getINTVALUEAccess() {
		return pINTVALUE;
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return tINT_EXPONENT;
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return tREAL_LIT;
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return tINTEGER_LIT;
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return tEXTENDED_DIGIT;
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return tBASED_INTEGER;
	} 

	//QCLREF:
	//	ID '::' ID;
	public QCLREFElements getQCLREFAccess() {
		return pQCLREF;
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public QPREFElements getQPREFAccess() {
		return pQPREF;
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public QCREFElements getQCREFAccess() {
		return pQCREF;
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public STARElements getSTARAccess() {
		return pSTAR;
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z') ('_'? ('a'..'z' | 'A'..'Z' | '0'..'9'))*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
