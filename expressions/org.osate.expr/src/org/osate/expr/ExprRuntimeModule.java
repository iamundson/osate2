/*
 * generated by Xtext
 */
package org.osate.expr;

import org.eclipse.xsemantics.runtime.StringRepresentation;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.serializer.tokens.ICrossReferenceSerializer;
import org.osate.expr.naming.ExprQualifiedNameConverter;
import org.osate.expr.naming.ExprQualifiedNameProvider;
import org.osate.expr.resource.ExprResourceDescriptionStrategy;
import org.osate.expr.scoping.ExprGlobalScopeProvider;
import org.osate.expr.scoping.ExprImportedNamespaceAwareLocalScopeProvider;
import org.osate.expr.scoping.ExprScopeProvider;
import org.osate.expr.serializer.ExprCrossReferenceSerializer;
import org.osate.expr.serializer.ExprSerializer;
import org.osate.expr.services.ExprValueConverters;
import org.osate.expr.typing.ExprStringRepresentation;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("restriction")
public class ExprRuntimeModule extends org.osate.expr.AbstractExprRuntimeModule {

	public Class<? extends ICrossReferenceSerializer> bindICrossReferenceSerializer() {
		return ExprCrossReferenceSerializer.class;
	}

	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return ExprQualifiedNameConverter.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ExprQualifiedNameProvider.class;
	}

	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return ExprResourceDescriptionStrategy.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return ExprScopeProvider.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return ExprValueConverters.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
				.to(ExprImportedNamespaceAwareLocalScopeProvider.class);
	}

	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ExprGlobalScopeProvider.class;
	}

	@Override
	public Class<? extends ISerializer> bindISerializer() {
		return ExprSerializer.class;
	}

	public Class<? extends StringRepresentation> bindStringRepresentation() {
		return ExprStringRepresentation.class;
	}
}
