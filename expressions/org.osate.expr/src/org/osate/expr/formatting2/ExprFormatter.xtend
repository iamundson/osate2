/*
 * generated by Xtext
 */
package org.osate.expr.formatting2;

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.osate.expr.expr.BagType
import org.osate.expr.expr.EDeclaration
import org.osate.expr.expr.ExprLibrary
import org.osate.expr.expr.ExprModel
import org.osate.expr.expr.ExprSubclause
import org.osate.expr.expr.Field
import org.osate.expr.expr.ListType
import org.osate.expr.expr.MapType
import org.osate.expr.expr.RecordType
import org.osate.expr.expr.SetType
import org.osate.expr.expr.TupleType
import org.osate.expr.expr.TypeDecl
import org.osate.expr.expr.VarDecl
import org.osate.expr.services.ExprGrammarAccess

class ExprFormatter extends AbstractFormatter2 {
	
	@Inject extension ExprGrammarAccess

	def dispatch void format(ExprModel exprmodel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(exprmodel.getAnnex(), document);
	}

	def dispatch void format(ExprLibrary exprlibrary, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (EDeclaration decls : exprlibrary.getDecls()) {
			format(decls, document);
		}
	}

	def dispatch void format(ExprSubclause exprsubclause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (EDeclaration decls : exprsubclause.getDecls()) {
			format(decls, document);
		}
	}

	def dispatch void format(TypeDecl typedecl, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typedecl.getType(), document);
	}

	def dispatch void format(VarDecl vardecl, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(vardecl.getDeclType(), document);
	}

	def dispatch void format(RecordType recordtype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Field field : recordtype.getFields()) {
			format(field, document);
		}
	}

	def dispatch void format(Field field, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(field.getType(), document);
	}

	def dispatch void format(TupleType tupletype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Field field : tupletype.getFields()) {
			format(field, document);
		}
	}

	def dispatch void format(ListType listtype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(listtype.getType(), document);
	}

	def dispatch void format(SetType settype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(settype.getType(), document);
	}

	def dispatch void format(BagType bagtype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(bagtype.getType(), document);
	}

	def dispatch void format(MapType maptype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(maptype.getDomain(), document);
		format(maptype.getImage(), document);
	}
}
